---
layout: blogpost
title: A Couchbase for Any Cloud
image: uric.jpeg
author: Uri Cohen
tags: 
 - Couchbase
 - Cloud
 - NoSQL
 - Application management
---

  <p>Couchbase is a great NoSQL database.&#160; It combines the power and flexibility of a schemaless document store, in-memory performance and super simple clustering and administration.</p>

  <p>So it's not surprising that a good 50% of Couchbase users have chosen to use it on the cloud.</p>

  <p>For the average Couchbase user (yours truly included, no special Couchbase ninja skills here), deploying and managing a Couchbase-driven application on the cloud can seem like a daunting task. There are many options out there, each with their own benefits and considerations. You can always<a href="http://www.couchbase.com/why-nosql/nosql-database"> roll out your own deployment</a>, or use tools like<a href="https://github.com/getaroom/chef-couchbase"> Chef</a>,<a href="https://forge.puppetlabs.com/thias/couchbase"> Puppet</a>,<a href="https://github.com/couchbaselabs/cloud-formation"> CloudFormation</a> or even<a href="https://github.com/couchbaselabs/rightscale_cookbooks"> RightScale</a>. Comparing them all is a blog post unto itself, and this post is lengthy enough as is... So in this post I'm going to focus on how Cloudify allows you to deploy, manage and scale your Couchbase app on any cloud environment.</p>

  <p>But first thing's first, let's take a deeper look at what it takes to manage multi-tier apps on the cloud:</p>

  <ul>
    <li>Starting VMs: A no brainer. Running your app requires compute resources. 'Nuff said.</li>

    <li>Installing and configuring the started VMs: Every VM needs proper installation and configuration. For example, for VMs which Couchbase runs on, you need to install Couchbase and configure the VM and installation to your liking (mount external volumes if needed, configure networking, ports, etc.).</li>

    <li>Starting and orchestrating application components: A truth I hold to be self-evident - all application tiers have inter-dependencies, and as a result they have to be aware of one another. For example, before starting your web container, you will need to make sure that your Couchbase cluster has successfully started and can be connected to, and you will need to expose the IP addresses and ports of that cluster to the web server.</li>

    <li>Repairing: Another truth - and this one is Murphy's not my own.&#160; What can go wrong, will go wrong. So it's best to prepare for the worst. Once everything is up and running, things inevitably will break. Processes will die for no apparent reason, VMs will come and go, and you need your application to continue to work even when this happens.</li>

    <li>Monitoring key metrics and scaling your application tiers based on them: Let's assume that this is for the best of reasons, not the worst, where your load spikes due to your application or service being inordinately successful. You need to be able to identify the load on your app across its various tiers and for very specific metrics (e.g. request latency), and take action based on it to make sure your users keep getting a decent service level. For example, if you see that the CPU load in your Couchbase server goes above 70%, you will want to add another instance and rebalance the cluster to even the load.</li>

    <li>Updating your application code: last, and not less important, is the update cycle of your application. In many cases you can't afford downtime, so having a mechanism that allows you to push code to the running instances on the fly is essential&#160; (naturally there's much more to continuous delivery than pushing code, but this too is a topic for a separate post).</li>
  </ul>

  <br/>
  In a cloud environment, which is dynamic and volatile by nature, it's also extremely important to automate all of these processes, so that you can set up environments easily and consistently, switch between environments, test things before you go live, maximize your utilization and minimize downtimes.

  <p>&#160;</p>

  <h1>How Cloudify Enters the Mix</h1>

  <p>Things we know about Cloudify already - it's an open source framework for deploying, managing and scaling your applications on any cloud environment. It's designed to handle all of the above for you, while enabling you to retain a high degree of control and flexibility by defining things from an application perspective rather than an infrastructure&#160; perspective, through our built-in recipes.&#160; So that brings me to the essence of the post...</p>

  <p>&#160;</p>

  <h1>Couchbase, Cloudified</h1>

  <p>We have just added an awesome <a target="_blank" href="https://github.com/CloudifySource/cloudify-recipes/tree/master/services/couchbase">Couchbase Recipe</a> to our repo. This allows you to deploy your Couchbase-driven apps right out of the box. The recipe supports Couchbase 2.0, and auto-registers all cluster members when starting. It also supports dynamically adding instances with a single command, and takes care of all of the cluster joining and rebalancing for you! It will soon also<a target="_blank" href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-tasks-xdcr.html"> support XDCR</a> so you can replicate data between availability zones or even other clouds. </p>

Here's a snippet from the new Couchbase recipe: <br/>
<br/>
  <script src="https://gist.github.com/4547146.js"></script> <br/> 
  <br/>
 <br/>
  <strong>[WARNING: SERIOUS GEEK STUFF AHEAD]. </strong> <br/> <br/>
  
  <h1>Ok, Now What?</h1>

  <p>Now, all you have to do is the regular Cloudify drill.&#160; Here's a quick recap...</p>

  <p>First,<a href="http://www.cloudifysource.org/guide/bootstrapping/bootstrapping_process"> bootstrap a Cloudify controller</a> environment on the cloud of your choice from the<a href="http://www.cloudifysource.org/guide/setup/installing_the_cloudify_client"> Cloudify CLI</a>. From that point onwards, the CLI will communicate with the controller over REST. Next, you issue an<a href="http://www.cloudifysource.org/guide/deploying/deploying_apps"> install-application</a> command that will trigger the controller to analyze the installed recipe, provision the right amount of VMs for it, and orchestrate the deployment of all the recipe components. This controller will then provide the<a href="http://www.cloudifysource.org/guide/monitoring/the_web_management_console"> cloud monitoring</a> for the deployed components and VMs, scale them if needed (manually or using using<a href="http://www.cloudifysource.org/guide/developing/scaling_rules"> cloud scaling rules</a>) and make sure to restart any failed components.</p>

  <p>Below is what this looks like in action (Click the image below to see how it works).</p>

  <a target="_blank" href="http://www.cloudifysource.org/how"><img align="center" src="http://i.picasion.com/pic63/a4e88798110bbbde4f7c8b6864c50eef.gif" width="450" height="153" border="0" alt="gifs" /></a>

  <p>&#160;</p>

  <h1>Gimme, gimme, gimme</h1>

  <p>And now after all the previous hype and buildup, we present the Cloudify player.</p>

  <p>We've created a special Cloudify player that lets you test drive you Couchbase recipe on demand, without having to download or install Cloudify at all. By just clicking on the Play button below, and then waiting a couple of seconds, you will have a running Couchbase instance on the cloud, for you to fiddle around with for 20 minutes. You can then look at the Couchbase console or the Cloudify console, and even write test code to interact with this server.</p>

  <p>Under the hood, the widget communicates with a server infrastructure that creates a dedicated Cloudify manager just for you, and uses the new Couchbase recipe to install and start the Couchbase server. </p>

  <p>So what are you waiting for, take a seat, and start playing.</p>
   
  <script type="text/javascript" id="cloudify-widget" data-api-key="4d642b90-ee10-45aa-b02a-175daf49a32d" data-title="Launch Couchbase 2.0.1" data-host="launch.cloudifysource.org" data-video_url="http://www.youtube.com/embed/VkQ3ppHeGX4" src="http://launch.cloudifysource.org/js/get_widget.js"></script>														
		
  Note: To login to the Couchbase console, use the following credentials:<br/>
  Username: Administrator<br/>
  Password: password<br/>
<br/><br/>
<p><a target="_blank" href="https://twitter.com/intent/follow?screen_name=uri1803"><img style="display: inline; float: left" title="1311765722_picons03" alt="1311765722_picons03" align="left" src="http://natishalom.typepad.com/.a/6a00d835457b7453ef017c329cd14f970b-75wi" width="42" height="42" />  Follow Uri </a>on Twitter!</p>


