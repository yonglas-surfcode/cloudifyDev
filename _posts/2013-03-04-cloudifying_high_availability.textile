---
layout: blogpost
title: Cloudifying High Availability
image: ali.png
author: Ali Hodroj
tags: 
 - Disaster Recovery
 - Cloud
 - High Availability
 - PaaS
---		
<p style="margin-left: .5in; text-align: justify;" class="MsoNormal"><em>The following is Part 1 of 2 on architecting highly available cloud applications using Cloudify. The first part introduces the concepts, challenges, and solutions to achieve highest levels of availability and disaster recovery in the cloud. The second part revisits the concept to provide a solution architecture and demo source code showing a real-world scenario implementation for a GigaSpaces Cloudify customer.&nbsp;</em></p>
<h4>Introduction</h4>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;">Failure in the cloud is inevitable, since the end of 2012 we've witnessed two major incidents in the cloud computing world which were the latest in the string of high profile cloud computing outages. The outages, within <a href="http://news.cnet.com/8301-1023_3-57561454-93/amazon-apologizes-for-netflixs-christmas-eve-streaming-outage/" onclick="javascript:pageTracker._trackPageview('/outgoing/news.cnet.com/8301-1023_3-57561454-93/amazon-apologizes-for-netflixs-christmas-eve-streaming-outage/');">Amazon Web Services</a> as well as <a href="http://blogs.msdn.com/b/windowsazure/archive/2013/02/24/windows-azure-service-disruption-from-expired-certificate.aspx" onclick="javascript:pageTracker._trackPageview('/outgoing/blogs.msdn.com/b/windowsazure/archive/2013/02/24/windows-azure-service-disruption-from-expired-certificate.aspx');">Microsoft Windows Azure</a>, brought down major online services. Such outages are an alarming reminder about the true nature of cloud resources&mdash;it's still just shared infrastructure of servers and data centers behind an API. Even though cloud vendors provide a set of infrastructure features to implement high availability, one cannot escape the increase in deployment complexity when trying to utilize those features for highly available systems. In this two-part blog post, I'll outline a real world scenario with a GigaSpaces customer that illustrates how Cloudify was leveraged to implement cloud-scale high availability while eliminating increase in accidental complexity.</span></p>
<h4>Approaches for Cloud High Availability</h4>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;">Cloud computing enables economies of scale facilitating high redundancy and geographically separate deployments. &nbsp;Approaching high availability a cloud environment requires the implementation of patterns and practices that introduce high redundancy and strive towards a shared-nothing architecture. Such patterns can be achieved through techniques such as geographically redundant cloud deployments and multi-site data replication to provide better fault tolerance and disaster recovery. This enables the elimination of single points of failure that could stop the entire system from operating in case of a disaster or node failure. &nbsp;There are three key principles to focus on:</span></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;"><br>
</span></p>
<p class="MsoNormal"><strong><img height="276" width="434" align="right" alt="" src="http://blog.gigaspaces.com/wp-content/uploads/cloud_ha(3).png"></strong></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;"><strong>Geographic Separation &ndash; </strong>Maintain high fault tolerance by utilizing multiple zones, regions, and cloud providers. For instance, Amazon's EC2 currently supports three regions in the US, each split into several availability zones, demarcated by different power sources and are physically segregated.</span></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;"><strong>Replication and Failover &ndash;</strong> Ensure data redundancy and backup by continuous replication of data across geographically separated sites. In addition, provide proactive monitoring to automate failover operations allowing applications to rapidly come back online after a failure occurs.</span></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;"><strong>Monitoring, Elastic Scaling, and Cloud Bursting &ndash; </strong>Enable proactive and actionable monitoring to enable: 1) elastic expansion of resources in case of load changes allowing applications to automatically scale up and down, 2) recovering from failure by automatically scaling up a DR environment to handle production load, and finally 3) Implement <a href="http://horovits.wordpress.com/2012/06/12/cloud-bursting/" onclick="javascript:pageTracker._trackPageview('/outgoing/horovits.wordpress.com/2012/06/12/cloud-bursting/');">cloud bursting</a> by dynamically deploying your application onto more powerful cloud to address a spike in demand.</span></p>
<h4>Challenges and Complexities &ndash; Portability and Automation</h4>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;">There are two significant impediments facing the climbing up the availability spectrum: lack of portability and automation immaturity. As we move beyond relatively simple web applications (deployed within an out of the box PaaS or simply hosted in an IaaS environment), the increase in solving the essential complexity of resilient cloud architecture triggers a direct increase in the <a href="http://en.wikipedia.org/wiki/Accidental_complexity" onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Accidental_complexity');">accidental complexity</a> of that architecture. This complexity emerges mostly from the need to design and implement custom automation solutions for auto deployment across traditional data centers, zones, regions, and private/public clouds. &nbsp;According to <a href="http://theinfopro.blogs.451research.com/index.php/2013/01/cloud-readiness-the-automation-age/" onclick="javascript:pageTracker._trackPageview('/outgoing/theinfopro.blogs.451research.com/index.php/2013/01/cloud-readiness-the-automation-age/');">recent research</a>, the second and third highest cloud enablement investment in the enterprise is spent on automation and orchestration.</span></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;">In addition to automation immaturity leading to significant IT or DevOps investment, the lack of portable cloud-agnostic orchestration solutions makes it difficult to retarget your cloud deployed application to another provider due to a variance between API sets, resource semantics, and data center levels of abstractions. To summarize, the issues are:</span></p>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;"><strong>Different levels of abstraction &ndash; </strong>The premise of cloud computing is that it provides a useful abstraction either at the infrastructure,<img height="227" width="318" align="right" alt="" src="http://blog.gigaspaces.com/wp-content/uploads/cloud_ha_challenges(3).png">platform, or application-level. However, the specifics of these abstractions vary greatly as we look into the ontology of their data centers and the hierarchy of resources within. As you try to move your architecture to a different cloud, you will run into some form impedance mismatch between the generics of your deployment model and the specifics of a certain IaaS model.</span></p>
<p style="text-align: justify;" class="MsoNormal"><strong style="font-family: tahoma, geneva, sans-serif;">Different API &ndash;&nbsp;</strong><span style="font-family: tahoma, geneva, sans-serif;">The set of cloud API vary drastically across different cloud vendors. In addition to the nuts and bolts of provisioning resources, security policies, authentication keys, and general administrative workflow vary greatly from a cloud provider to another. This presents a challenge when trying to architect a deployment model that is adaptable enough to arbitrary regions and clouds.&nbsp;</span></p>
<p style="text-align: justify;"></p>
<h4>Cloudify &ndash; Increasing Resiliency without the Complexity</h4>
<p style="text-align: justify;"><span style="font-family: tahoma, geneva, sans-serif; text-align: justify;">Although cloud vendors provide simplified access to a large pool of resources through API calls, this does not mitigate the increasing cost of implementing high availability and disaster recovery through custom automation<img height="239" width="288" align="right" alt="" src="http://blog.gigaspaces.com/wp-content/uploads/cloudify_complexity(10).png"> approaches. To address this problem, Cloudify proposes a higher level of abstraction designed to isolate an application from the underlying cloud environment, and to provide a common foundation for integration with all major cloud and virtualization vendors. The realization of this is achieved through <a href="http://www.cloudifysource.org/guide/2.3/clouddrivers/cloud_driver.html" onclick="javascript:pageTracker._trackPageview('/outgoing/www.cloudifysource.org/guide/2.3/clouddrivers/cloud_driver.html');">cloud drivers</a> that support both public clouds (Amazon EC2, Windows Azure, Rackspace, HP Cloud...etc) and private clouds (OpenStack, cloud.com, VMWare vCenter, Citrix XenServer...etc).&nbsp;</span></p>
<p style="text-align: justify;"><span style="font-family: tahoma, geneva, sans-serif; text-align: justify;">With this flexibility at hand, creating a new cloud with your application stack is a matter of creating a set of recipes through a Groovy-based DSL that would describe the different lifecycle phases for deployment. In addition to solving the portability challenge through cloud driver abstraction and recipes, Cloudify simplifies portability even more through the introduction of <a href="http://www.cloudifysource.org/guide/2.5/bootstrapping/bootstrapping_cloud" onclick="javascript:pageTracker._trackPageview('/outgoing/www.cloudifysource.org/guide/2.5/bootstrapping/bootstrapping_cloud');">cloud overrides</a>: an easy way to parameterize your cloud deploymnet through a set of property files. This parameterization allows us to move from multi-region, muti-zone, to multi-cloud with a simple change in configuration files &mdash; minimizing cycle time and coping with cloud platform incompatibility. Simply put, it's an implementation of "infrastructure as code" pattern from a high availability perspective, such that provisioning a DR cloud on a different zone, region, or provider becomes a matter of passing a configuration file to bootstrap another cloud. The details on how this can be implemented will be presented in the second part of the this blog post. &nbsp;</span></p>
<p style="font-weight: normal; text-align: justify;">
</p><h4><img height="328" width="728" align="middle" alt="" src="http://blog.gigaspaces.com/wp-content/uploads/cloudify_ha(6).png"></h4>
<h4></h4>
<h4>Conclusion</h4>
<p style="text-align: justify;" class="MsoNormal"><span style="font-family: tahoma,geneva,sans-serif;">The first part of the series aimed to present the complexities, challenges, and potential approaches for achieving a resilient cloud architecture through cloud high availability maturity model. We've shown how the increase in high availability of a cloud application triggers a direct increase in deployment complexity. Through Cloudify, we are able to climb up the model while keeping the complexity of the deployment workflow at minimal levels by utilizing the core portability and lifecycle management automation features of the framework.</span></p>
<p style="text-align: justify;" class="MsoNormal"><em><span style="color: black; mso-themecolor: text1;">&nbsp; The second part of these series will dive into the design and implementation of a real-world GigaSpaces customer scenario, revisiting the cloud availability model and applying it to an actual architecture on Amazon EC2 along with Cloudify recipes and sample code.&nbsp;</span></em></p>
