---
layout: blogpost
title: To Openstack or not to Openstack Moving Enterprise Applications onto Openstack Today
image: natiuri.png
author: Nati Shalom and Uri Cohen
tags: 
 - OpenStack
 - Cloud Computing
 - Cloudify
 - DevOps
---		

<div id="entry-6a00d835457b7453ef01901e4287d2970b" class="entry-category-cloud entry-category-cloud_computing entry-category-cloudify entry-category-devops entry-category-open_source entry-category-openstack entry-author-nati_shalom entry-type-post entry"><div class="entry-content"><div class="entry-body">
			<p><a href="http://www.linkedin.com/in/chadwickpete"><strong>Peter Chadwick</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a> Senior Product Manager - Cloud Infrastructure at SUSE wrote an interesting article arguing&nbsp; <a href="http://insights.wired.com/profiles/blogs/why-openstack-will-rule-the-enterprise?goback=%2Egde_3239106_member_255300874 \l axzz2YZezRT56"><strong>Why OpenStack Will Rule the Enterprise</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>. Chadwick refers to three main points in his arguments:</p>
<ul>
<li><strong>Variety -</strong> OpenStack is the only cloud platform that <a href="http://docs.openstack.org/trunk/openstack-compute/admin/content/selecting-a-hypervisor.html"><strong>supports every major hypervisor</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>.</li>
<li><strong>Familiarity -</strong> OpenStack follows an open source model similar to Linux. Most enterprises are already comfortable with that model and in that context OpenStack would be a natural evolution.</li>
<li><strong>Governance -</strong> The OpenStack Foundation was created to ensure that OpenStack evolves to meet a wide range of requirements that are not controlled by a single vendor.</li>
</ul>
<p><strong>Current Challenges for Enterprise Adoption of OpenStack</strong></p>
<p>While there is a growing acceptance that this is the general direction, others seem to point out some of the gaps that still exist to enable enterprise adoption of OpenStack. <a href="http://www.itworld.com/nancy-gohring"><strong>Nancy Gohring</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a><strong> </strong>mentions in an article in ITWorld <strong></strong><a href="http://www.itworld.com/cloud-computing/352699/immaturity-holding-back-openstack-deployments"><strong>Immaturity holding back OpenStack deployments</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>&nbsp; that the main challenges are the&nbsp; lack of maturity and the fact that OpenStack is used mostly for testing and development and is not ready for true multi-tenant production deployments. She also points out the fact that many of the OpenStack distributions today are offered by relatively small companies, creating another barrier for adoption.&nbsp; Bernard Golden more specifically highlights the upgrading and deploying of OpenStack as the main challenges for enterprise adoption in his article <a href="http://www.cio.com/article/732123/How_OpenStack_Should_Prepare_Itself_for_the_Enterprise?page=3&amp;taxonomyId=3024"><strong>How OpenStack Should Prepare Itself for the Enterprise</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>.</p>
<p><strong>A Possible Strategy for Adopting OpenStack in an Enterprise World Today</strong></p>
<p>All the cards indicate that despite some of the maturity and growing pains of OpenStack as a framework and community, it is heading in the right direction. But as we often say in those cases, "there is no fast forward for maturity." We need to expect that over the course of the coming years the reality is going to be fairly dynamic with lots of new developments coming out with every release and with many providers and players promoting their different OpenStack offerings. To compete with one another, these providers will also try to add their own value-added features as differentiators. So our proposed strategy has the following foundations:</p>
<ul>
<li><strong><em>Design to cope with a continuously changing and evolving environment</em>:</strong> We need to design our OpenStack environment in such away that we could adopt new versions of OpenStack&nbsp; and new ecosystem frameworks easily.</li>
<li><strong><em>Design for portability across different OpenStack providers and versions</em>:</strong> During a visit to one of our investment banking customers, he used an interesting analogy to describe his strategy for implementing an OpenStack-based private cloud on his environment:</li>
</ul>
<blockquote>
<p>"In a traditional data-center world we used to work at a hardware device and hypervisor level. We used different resources from Dell, HP etc. We're thinking of doing the same thing in the cloud world, only that rather than working at the device and hypervisor level, we can work at the IaaS level with the hardware, storage and network pre-integrated. OpenStack allows us to standardize those providers and have a mix of them installed in our data-center."</p>
</blockquote>
<blockquote>
<p>In order to keep this level of flexibility, you need to ensure portability between the different OpenStack providers. This is especially true in a world where each provider tries to sell you the entire world wrapped up into one with OpenStack on top. If you design your data center to work with various providers in place, you're more likely to remain portable and avoid a complete lock-in.</p>
</blockquote>
<ul>
<li><strong><em>Use a high availability approach to enable simple upgrades without downtime</em>:</strong> The simplest approach to upgrade any given system is to rip and replace it with a new one. Having said that, in most enterprises, taking a system down for the purpose of upgrades or maintenance is often not acceptable, for obvious reasons. If we design our system for continuous high availability, we could take down each of the cloud zones one at a time and still keep our application running. In this way, we could have a simpler upgrade approach; rather than trying to upgrade individual units of our infrastructure, we can can rip and replace an entire unit one at a time to continuously upgrade our system.</li>
<li><strong><em>Take a baby steps approach</em>:</strong> As with any complex project, it would be more practical to implement OpenStack in small bits rather than taking a *Big Bang* approach. Here are few examples of what those steps could look like:
<ul>
<li>Start with automation first and future-proof your application to run on OpenStack at a later stage.</li>
<li>Run OpenStack for your development and testing environment.</li>
<li>Use OpenStack as your DR environment and gradually move your primary site to OpenStack as well.</li>
</ul>
</li>
</ul>
<p><strong>Implementing the Strategy by Abstracting the Application from the Infrastructure</strong></p>
<p>The points outlined above may seem obvious, but it is not yet clear how they can be implemented.</p>
<p>One of the ways in which we could implement portability, future-proof our application and allow for smooth upgrades is through the use of devops automation frameworks, such as Chef, Puppet or <strong><a href="http://www.cloudifysource.org/">Cloudify<img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>,</strong> which itself integrates natively with <a href="http://www.cloudifysource.org/guide/2.6/integrations/chef_documentation.html"><strong>Chef</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a> and&nbsp; <a href="http://www.cloudifysource.org/guide/2.6/integrations/puppet_documentation.html"><strong>Puppet</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>. </p>
<p>Such frameworks allow us to create an abstraction layer between our OpenStack infrastructure and our application to easily migrate our application across different OpenStack providers, versions etc.</p>
<p><strong>Using Cloudify to Abstract your Deployment Between Different Private and Public OpenStack Providers</strong></p>
<p>One of the challenges with many of the abstraction frameworks is the fact that they often rely on a least common denominator API approach. An API abstraction approach limits the level of unique features and capabilities that can be provided by each specific vendor. </p>
<p>In the case of Cloudify, we use a plug-in approach that is referred to as the <strong><a href="http://www.cloudifysource.org/guide/2.6/clouddrivers/cloud_driver.html">Cloud Driver<img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>,</strong> which provides access to the IaaS layer, while a <a href="http://www.cloudifysource.org/guide/2.6/developing/recipes_overview"><strong>recipe model</strong><img src="http://www.previewshots.com/images/v1.3/t.gif" style="margin: 0px; max-height: 2000px; max-width: 2000px; min-width: 0px; min-height: 0px; padding: 1px 0px 0px; border: 0px none; font-style: normal; font-weight: normal; font-family: &quot;trebuchet ms&quot;,arial,helvetica,sans-serif; float: none; position: static; left: auto; top: auto; line-height: normal; background-image: url(&quot;http://www.previewshots.com/images/v1.3/theme/silver/palette.gif&quot;); background-color: transparent; visibility: visible; width: 14px; height: 12px; background-position: -1128px 0px; background-repeat: no-repeat; text-decoration: none; vertical-align: top; display: inline;" class="snap_preview_icon" id="snap_com_shot_link_icon"></a>&nbsp;separately defines the application plan or blue-print that needs to be deployed. </p>
<p>With this approach, there is a basic contract/interface that each driver must implement to allocate compute, storage or network resources. Each driver can be given a set of specific properties and arguments with which the user can choose a specific network setup or compute API of a specific driver.&nbsp; This approach provides a higher degree of flexibility than an API-based abstraction and we can, therefore, apply it to address a variety of scenarios as outlined below:</p>
<ul>
<li><strong><em>Migrating between different OpenStack providers</em>:</strong> The application deployment plan (recipe) is kept abstracted from this information. This way we can deploy our application on different providers using the same frameworks, but at the same time our application can still run better on a specific provider and utilize its specific set of features.&nbsp; </li>
<li><strong><em>Migrating from an existing (non-OpenStack) data center to OpenStack</em>:</strong> This abstraction allows us to work on top of our existing data center which may not yet support OpenStack. We can use this model to manage our application in the existing data center by pointing to a BYON (Bring-Your-Own-Node) CloudDrive, which gets a list or range of IP addresses as an input and manages the workload within that predefined pool. </li>
<li><strong><em>Migrating between different OpenStack versions</em>:</strong> We can also use this model to migrate workloads from one version of OpenStack to the other. In this case, each provider's availability zone will represent a a specific OpenStack version. We can upgrade our underlying OpenStack zone just by removing it from the system. Cloudify in turn will automatically provision the application that was running on this provider in another zone which will be set to run the new version of our application.</li>
</ul>
<p><a href="http://natishalom.typepad.com/.a/6a00d835457b7453ef019104389d20970c-pi"><img width="244" border="0" height="143" title="Image" style="display: inline; border: 0px;" src="http://natishalom.typepad.com/.a/6a00d835457b7453ef0192ac01cf96970d-pi" alt="Image"></a></p>
<p><strong>Making Cloudify Native to OpenStack</strong></p>
<p>One of the benefits of OpenStack as opposed to other cloud infrastructures is the fact that it is open and provides easy access to its underlying stack. We can, therefore, build Cloudify in such a way that utilizes some of the underlying OpenStack infrastructure, such as Heat for provisioning and Keystone for authentication.&nbsp; </p>
<p>We can also standardize the existing component of Cloudify, such as the recipe, by adopting TOSCA and Heat notions and templates.</p>
<p>This way we can make the migration to OpenStack even easier. Not only are we enabling our application to run on OpenStack, we also do it in a way that will better utilize the underlying OpenStack infrastructure.</p>
		</div>
	</div>
	</div>
        
 

