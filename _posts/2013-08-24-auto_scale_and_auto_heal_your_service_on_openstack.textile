---
layout: blogpost
title: Auto-scale and Auto-heal your state-full Apache or tomcat service on OpenStack 
image: yoram.jpeg
author: Yoram Weinreb
tags:  
 - OpenStack 
---				

<div class="post-83 post type-post status-publish format-standard hentry category-uncategorized" id="post-83">
<div class="entry-content"><p>Architecting and building a web service in the cloud age is quite simple.<br>
Options range from web site generators such as Wix, to Paas providers such as GAE, all the way to the traditional LAMP setup hosted on IaaS that gives you the maximum control and customization power.<br>
Quoting Spider-man, "with great power comes with great responsibility".
In our case, if you choose to LAMP or its variants on IaaS, you have the responsibility to ensure proper service level that in many cases require high availability configuration to minimize downtime as well as ability to scale the service as user traffic increases.<br>
Such service level requirement typically translates to putting your front-end web servers behind a load-balancer and allowing the application to scale out to multiple web servers.<br>
In case your web service is state-full, additional considerations typically results in ability to distribute the session context management and in some cases instruct the load-balancer to enforce sticky session load balancing algorithms.</p>
<p>Cloudify, a DevOps automation tool which is basically equivalent of Amazon OpsWorks on <a href="http://www.openstack.org/" sl-processed="1">Openstack</a>, lets you get all this "great responsibility" with significantly less effort and help you abstract you architecture from the actual IaaS you will choose to work with to keep the flexibility to change vendor in the future or create a service that utilize more than one IaaS vendor.</p>
<p>In this post, I will show you how to easily deploy web service based on tomcat web servers, XAP distribute session management and Apache that serves as a load-balancer as a service to the front end the tomcat servers.<br>
<a href="http://yoramweinreb.files.wordpress.com/2013/08/tomcatwebservicedeploymentdiagram.png" sl-processed="1"><img width="300" height="173" src="http://yoramweinreb.files.wordpress.com/2013/08/tomcatwebservicedeploymentdiagram.png?w=300&amp;h=173" alt="TomcatWebServiceDeploymentDiagram" class="alignright size-medium wp-image-85" originalw="300" originalh="173" src-orig="http://yoramweinreb.files.wordpress.com/2013/08/tomcatwebservicedeploymentdiagram.png?w=300&amp;h=173" scale="1"></a></p>
<p>The Apache load balancing allows us to keep a VIP the internet know about and hide behind it arbitrary number of web servers.</p>
<p><span style="text-decoration:underline;">How do I actually use it?</span></p>
<p>1. Download Cloudify from <a href="http://www.cloudifysource.org" sl-processed="1">www.cloudifysource.org</a><br>
2. Download the HttpSession sample recipe from <a href="https://github.com/yoramw/cloudify-recipes/tree/master/apps/HttpSession" sl-processed="1">https://github.com/yoramw/cloudify-recipes/tree/master/apps/HttpSession</a> and its services from <a href="https://github.com/yoramw/cloudify-recipes/tree/master/services" sl-processed="1">https://github.com/yoramw/cloudify-recipes/tree/master/services</a> (both apps and services folders should be in the same folder hierarchy as it appears in the recipes folder)<br>
3. Start the Cloudify CLI (bin/cloudify.sh (or bat for windows)<br>
4. Run &gt; bootstrap-cloud<br>
5. Start the WebUI from the URL that the CLI printed once the bootstrapping was done.<br>
6. Install your recipe app &gt; install-application -timeout 30 /apps/HttpSession<br>
7. Wait for Cloudify to deploy the servies (it should take 5 &ndash; 20 minutes depending on the cloud provider speed).<br>
8. You can bring additional tomcats or shut them down using &gt; set-instances tomcat &lt;# of desired instances&gt;<br>
9. You may run some load on your new web service and see how it behaves using: &gt; invoke apacheLB load 35000 100 (3500 requests by 100 concurrent requesters)</p>
<p>As you can see, the deployment is very simple. Cloudify configures everything for you and connect the services together.<br>
You can use the same recipe to deploy your testing/staging environment as well as the production environment.<br>
Changing the deployment to a different provider just means bootstrapping a different cloud and installing the application recipe there exactly the same way.</p>
<p><span style="text-decoration:underline;">Behind the scenes:</span></p>
<p>Using XAP as the distributed session store requires Apache Shiro.<br>
The tomcat recipe takes care of connecting Shiro to XAP.<br>
If you want to dive into the details and adjust configurations, I recommend reading the Gigaspaces paper on global Http session sharing at <a rel="nofollow" href="http://wiki.gigaspaces.com/wiki/display/SBP/Global+Http+Session+Sharing" sl-processed="1">http://wiki.gigaspaces.com/wiki/display/SBP/Global+Http+Session+Sharing</a>.</p>
<p>In order to enable Shiro in your own application, use the HttpSession example as a starting point. Place the shiro.ini from the HttpSession example in your app WEB-INF, add the shiro filter to the app web.xml and add the jars to the lib folder as shown in the example recipe.</p>
<p>In the recipe, the ApacheLB recipe bring up an Apache that servers as the load balancer. It configures the service to either respect sticky sessions or not by setting the "useStickysession" property in the apacheLB properties file to true or false.</p>
<p>When a tomcat service instance complete its installations, it will register itself with the ApacheLB which will automatically add it to its pool ready web server.<br>
When a tomcat service it orderly brought down, the first step it does is to remove itself from the ApacheLB pool or ready servers.</p>
<p>The ApacheLB recipe also let you generate load to test your setup by utilizing the Apache ab command line utility.</p>
<p>&nbsp;</p>
<p><strong>To sum things up</strong>, Cloudify takes the hassle, time and effort from deploying your highly available and scalable web app while letting you hold on to gains of having the most flexibility in designing and building your application the LAMP way...</p>

</div><!-- .entry-content -->
<!-- .entry-utility --></div>