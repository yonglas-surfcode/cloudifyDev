---
layout: blogpost
title: XAP on Cloudify Part 1
image: dewayne.jpg
author: DeWayne Filppi
tags:  
 - Ec2
 - OpenStack
 - Xap
 - Web UI
---				
<div class="entry"><p><strong>Introduction</strong></p>
<p>GigaSpaces XAP has lacked an official Cloudify recipe for some time now, and this series of posts will address my efforts to create one. The task of automating the deployment and management of the potentially complex suite of services that XAP represents is a challenge in and of itself, and marrying that with the sometimes overlapping constructs of Cloudify is even more challenging. This post will address the rationale for the effort, a bit of history of the effort, and a description of the recipes as they exist today. This is a work in progress, and all interested in contributing are encouraged to contribute.</p>
<p><strong>Rationale</strong></p>
<p>There are many use cases for automating the deployment and management of XAP using Cloudify constructs. A few:</p>
<ul><li><strong>Repeatable deployments</strong>. This is one of the standard Cloudify (and devops) virtues. Repeatable, automated deployments are less error prone and convenient.</li>
<li><strong>Platform independence</strong>. A Cloudify recipe serves as platform (in the infrastructure sense) independent description of deployment and configuration steps. A XAP recipe for Cloudify provides repeatable deployment on any Cloud and on non-virtual (or statically created virtual) hardware.</li>
<li><strong>Composition</strong>. While it is conceivable to have a complete solution implemented entirely in XAP, in reality this is rare. XAP is generally married at least to a database, and almost always part of a stack where it takes the position of traditional middleware. With a Cloudify recipe, the deployment and management of an entire stack which includes XAP, can be automated.</li>
<li><strong>Continuous Delivery</strong>. A stack including XAP that is automated via Cloudify can expose CI/CD meaningful remote commands that can provide stack-wide delivery functionality by integrating with popular CI build tools via a common interface.</li>
<li><strong>Custom scaling behavior</strong>. By scaling using Cloudify rather than the XAP ESM, XAP scaling and rebalancing can be fully customized.</li>
<li><strong>Improved dynamism</strong>. By describing a complete stack that includes XAP, the ability to scale dynamically in a holistic fashion is greatly increased. A classic example is exploiting public cloud capacity during volume spikes. With a XAP recipe, entire XAP-centric stacks can be spun up on demand, or in anticipation of demand.</li>
<li><strong>Derived works</strong>. By descriping XAP in a recipe, the door is opened a bit to create derived cloud services based on XAP, such as Grid as a Service, and Replication as a Service, among others. &nbsp;The recipes are designed to be easily inherited from to support such development.</li>
</ul>
<br/>
<p><strong>Using The Recipes</strong></p>
<p>Currently, you can grab the recipes from my fork of the cloudify-recipes repo <a href="https://github.com/dfilppi/cloudify-recipes" title="dfilppi cloudify-recipes fork" onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/dfilppi/cloudify-recipes');">here</a>. The service recipes are under <code>services/xap9x</code>. A simple application recipe is also available that starts a single container at <code>apps/xap9x-tiny</code>.</p>
<p>The <code>xap9x-tiny</code> application will run without modification or reconfiguration. It uses a XAP 9.6 b9500 distribution and only deploys a single container, so no license is required (at least as currently configured). If you want to experiment with more nodes, or larger containers, you'll have to provide a license key. This key will need to be set to the <code>license</code> property in both management and container recipes properties files. If you have your own XAP distribution you want to use, you'll need to put it an HTTP server in a place accessible from your target infrastructure. Then you'll need to modify the related properties in both management and container recipes.</p>
<p>Besides the license key, there are settings that may need to be tweaked to run a larger grid. For larger containers, you'll possibly need to use a different machine template (perhaps 8GB or beyond system memory). To do this, you'll need to create a machine template that refers to the proper cloud machine id, or ip address in the case of BYON. The easiest way to do this is to copy the default "SMALL_LINUX" or "SMALL_UBUNTU" into a separate file, modify the <code>hardwardId</code> to use the larger machine, and then add this to Cloudify via the "add-templates" CLI <a href="http://www.cloudifysource.org/guide/2.6/recipe/command_line_reference#add_templates" title="add-templates" onclick="javascript:pageTracker._trackPageview('/outgoing/www.cloudifysource.org/guide/2.6/recipe/command_line_reference#add_templates');">command</a>. Of course you can simply add this template permanently to your *-cloud.groovy script. Once you have your larger machine, you'll need to utilize it. The container recipe has a property setting named <code>gsc_jvm_options</code>, which are passed to the container when it starts. These settings are simply passed to the associated GSC in the GSC_JAVA_OPTIONS environment variable (described <a href="http://wiki.gigaspaces.com/wiki/display/XAP96/The+Grid+Service+Container" title="GSC_JAVA_OPTIONS" onclick="javascript:pageTracker._trackPageview('/outgoing/wiki.gigaspaces.com/wiki/display/XAP96/The+Grid+Service+Container');">here</a>).</p>
<p>When a cluster becomes large enough, the management machine may also need to be beefed up. &nbsp;The management recipe has three settings for tailoring the various JVMs, and their function is equivalent to the <code>gsc_jvm_options</code>. They are:</p>
<ul><li>gsm_jvm_options</li><li>lus_jvm_options</li><li>webui_jvm_options</li></ul>

<p>To access the XAP Web UI after launching, the management service has a link to it in the "Details" area.</p>
<p><em>Custom Commands</em></p>
<p>Some basic custom commands are included:</p>
<dl>
<dt><strong>deploy-pu</strong> &ndash; deploy a processing unit</dt>
<dd>Parameters:<p></p>
<ul>
<li>name &ndash; the displayed name of the processing unit</li>
<li>url &ndash; the URL where the pu can be downloaded from (recipe uses http GET)</li>
<li>schema &ndash; the space schema for the pu. Defaults to partitioned-sync2backup.</li>
<li>partitions &ndash; primary partition count</li>
<li>backups &ndash; number of backups per partition. Can be 0.</li>
<li>maxpervm &ndash; maximum instances per container VM (not Cloud VM).</li>
<li>maxpermachine &ndash; maximum instances per physical machine or Cloud VM.</li>
</ul>
</dd>
</dl>
<dl>
<dt><strong>deploy-grid</strong> &ndash; deploy a space</dt>
<dd>Parameters:<p></p>
<ul>
<li>name &ndash; the name of the space</li>
<li>schema &ndash; the space schema. Defaults to partitioned-sync2backup.</li>
<li>partitions &ndash; primary partition count</li>
<li>backups &ndash; number of backups per partition. Can be 0.</li>
<li>maxpervm &ndash; maximum instances per container VM (not Cloud VM).</li>
<li>maxpermachine &ndash; maximum instances per physical machine or Cloud VM.</li>
</ul>
</dd>
</dl>
<dl>
<dt><strong>undeploy-grid</strong> &ndash; undeploy a space</dt>
<dd>Parameters:<p></p>
<ul>
<li>name &ndash; the name of the space</li>
</ul>
</dd>

h4(impt). This command can be used to undeploy an arbitrary pu.

</dl>
<p><strong>A Little History</strong></p>
<p>In my previous work on <a href="http://blog.gigaspaces.com/gigaspaces-and-storm-part-2-xap-integration/" title="GigaSpaces and Storm Part 2: XAP Integration">Storm integration</a>, I developed a simple recipe based on a single node XAP deployment. This was largely to avoid the potential complexities of a full blown XAP recipe, and a basic Storm integration doesn't really require more than a single node anyway.</p>
<p>Nevertheless, much of that initial recipe was useful as a starting point for the full recipe. Initially, I wanted a single service recipe to represent XAP in Cloudify. This approach would be the simplest from the user perspective, but in the end wasn't doable in an elegant way. In the end, I chose a two recipe approach: a <em>xap-management</em> recipe, and a <em>xap-container</em> recipe. <em>xap-management</em> orchestrates the management services (gsm, lus, and web ui), and <em>xap-management</em> manages GSCs (containers). The management recipe serves as the hub for custom commands to perform cluster-wide operations such as deployment.</p>
<p><strong>The Recipes: Design </strong></p>
<p>Since a XAP cluster (excluding GSAs) consists of a few management processes, and many containers, it is logical to have (at least) two recipes: one for management and one for containers. One approach might be to simply create a recipe for every type of grid process: ESM, GSM, GSA, LUS, and GSC. This would supply some additional flexibility, but since only two of each at the most is recommended in grids of any size, the amount of flexibility gained from having many recipes is minimal. Also, since Cloudify itself provides GSA (process watchdog) and ESM (dynamic scaling) functionality, there is no need to start additional instances of these. This leaves the GSM (grid management/deployment) and the LUS (lookup service). For the container part, the recipe only needs to start a GSC. At this point in the development process, dynamic rebalancing after an autoscaling event is not addressed.</p>
<p><strong>The Recipes: <em>xap-management</em></strong></p>
<p><em>xap-management</em> starts the management services of XAP, the GSM and LUS. It also starts the Web UI. Currently it simply starts the gsm.sh script and uses the embedded LUS. One enhancement target would be to make the starting of a separate LUS a configuration option. The recipe is elastic with a maximum of two instances. Critical configuration items (in the xap-management-service.properties files):</p>
<ul>
<li>template &ndash; the cloud template name for the recipe to use.</li>
<li>gsm_jvm_options &ndash; java options passed to the GSM JVM</li>
<li>lus_jvm_options &ndash; java options passed to the LUS JVM</li>
<li>webui_jvm_options &ndash; java options passed to the LUS JVM</li>
<li>uiport &ndash; the HTTP port for the Web UI to listen on.</li>
<li>lusport &ndash; the LUS port. This port essential defines and separates grid from each other and Cloudify itself. This port must be the same in both management and container recipes, and different from the LUS port that Cloudify uses.</li>
<li>license &ndash; if running more than the free license allows, this property must be set to a valid XAP license string.</li>
</ul>
<p><strong>The Recipes: <em>xap-container</em></strong></p>
<p><em>xap-container</em> start GSCs in the cluster. &nbsp;The recipe is elastic and doesn't practically limit the number of containers that can be started. &nbsp;This recipe is much simple than the management recipe, and has no custom commands for public consumption. &nbsp;It does have a custom command for editing the node hosts file. &nbsp;This is used for providing a symbolic name for the lookup service, and reacting to management services relocations. &nbsp; Except for the jvm options above, the configuration parameters are the same. &nbsp;Since only a single process is started (a GSC), there is only one property to hold JVM options: gsc_jvm_options (which maps to the standard GSC_JAVA_OPTIONS environment variable).</p>
<p><strong>What's Missing and What's Next</strong></p>
<p>There are significant omissions and plans for these recipes. &nbsp;An obvious omission is partition rebalancing on a scaling event. &nbsp;Another is the need for far more metrics, and a replication gateway recipe. &nbsp;But this is a start. In future posts, I'll describe in more detail what's missing and why, some of the implementation war stories, and future plans.</p>
<p><strong>Conclusion</strong><br>
In my opinion, XAP has needed a general purpose Cloudify recipe, and this is a start in that direction. This is a work in progress. It has been tested on EC2, HPCS, and a BYON cluster. Comments and contributions are welcome, as this will be an ongoing effort. Again, the code is <a href="https://github.com/dfilppi/cloudify-recipes" title="dfilppi cloudify-recipes fork" onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/dfilppi/cloudify-recipes');">here</a>, at least for now.</p>
