---
layout: bt_wiki
title: Developing Custom Cloud Drivers
category: Developing Cloud Drivers
publish: true
abstract: An overview of how to develop custom cloud drivers
pageord: 200
---

This topic is an overview of how to develop custom cloud drivers. For general information about the Cloudify cloud driver, see "The Cloud Driver":../clouddrivers/cloud_driver.

h2. Introduction

The cloud driver is an open interface enabling users to implement their own cloud drivers to support specific private cloud environments, or to create a more granular configuration of public cloud environments.

There are several things to consider when creating your own cloud driver, or tweaking the configuration of an existing one:
* *Loading custom class files*--The cloud driver implementation classes must be available to both the client that bootstraps the cloud, and to the Cloudify ESM management components, which are responsible for scaling services. Currently, it is the cloud driver developer's responsibility to make sure that the classes are on the classpath of the required components, for example, by adding the jar file containing your classes to the Cloudify distribution under @<cloudifyRoot>/lib/required@. These jar files are automatically added to the classpath of all components, and by adding them to the distribution they will always be available when provisioning new machines. Typically, the distribution file is downloaded from a cloud'd local network file store (e.g. Amazon S3 in the case of Amazon).
* *Loading custom startup scripts*--Once the bootstrap or scale-out process successfully provisions a new machine, a startup script is executed on the remote machine over SSH. The script is responsible for downloading and installing Cloudify, and then starting the Cloudify agent. In some implementations, you may need to tweak this process to fit the requirements of specific environments (e.g., system proxies, mount points, and paths). You can use the default startup script (@<cloudifyRoot>/tools/cli/plugins/esc/ec2/upload/bootstrap-management.sh@), which works with the built-in cloud driver, as the basis for the startup script for your own cloud driver. Simply place the modified script in the @upload@ folder corresponding to your cloud of choice (e.g. For EC2, @<cloudifyRoot>/tools/cli/plugins/esc/ec2/upload/@) and it will automatically be uploaded to every new machine.

h2. How does the Cloud Driver Work? (A Technical Overview)

To explain the main cloud driver scenarios, we will use the Openstack cloud driver (@OpenstackCloudDriver@) that extends the @CloudDriverSupport@ base class and implements the @ProvisioningDriver@ interface.

The Cloudify cloud driver (Interface Name: @ProvisioningDriver@) is a Java POJO that uses a configuration file to define cloud specific attributes, and has methods corresponding to the following main scenarios:
* *"Bootstrapping a Cloud":#bootstrap*--Allocates machines and installs the Cloudify controller.
* *"Installing an Application":#install*--Allocates machines for application services and installs the application's services (including the Cloudify agent). In this scenario, the cloud driver resides on the management machine as part of the Cloudify controller.<h4 class="info">There is also a *Cluster healing* scenario which is treated by Cloudify as being the same as the *Installing an application* scenario.</h4>
* *"Uninstalling an Application":#uninstall*--Stops the application's services and instructs the cloud driver to unininstall the machines used by the services.
* *"Tearing Down a Cloud":#teardown*--Uninstalls all Cloudify machines and components. 

h3(#bootstrap). Bootstrapping a Cloud

<img src="../../images/clouddrivers/bootstrapping.png"/>

In this scenario, the cloud driver resides on the client machine as no management machines with the Cloudify controller exist. At the Cloudify shell prompt, the user runs the bootstrap command specifying a cloud driver implementation. The cloud driver is instantiated by the shell, and now the shell passes the *Driver Reference* to its configuration object (org.cloudifysource.dsl.cloud.Cloud) by calling the @setConfig@ method.

<script src="https://gist.github.com/2043019.js?file=setConfig.java"></script>

Next, the shell invokes the cloud driver's @startManagementMachines@ method, which in turn calls the cloud's IaaS API (using the API security settings) to get the required management machines. The cloud API returns an array of MachineDetails (org.cloudifysource.esc.driver.provisioning.MachineDetails) with connction details for each of the allocated management machines. The details are used by the shell to connect to the machines and install the Cloudify management components. Finally, Cloudify starts the following Cloudify controller components: ESM(Elastic Service Manager), GSM(General Service Manager), LUS(Lookup Service) and the Management Space. It will also start the web management container and the REST API container.

<script src="https://gist.github.com/2043033.js?file=createServer.java"></script>

h3(#install). Installing an Application

<img src="../../images/clouddrivers/installApplication.png"/>

In this scenario, the cloud driver resides on the server machine. Once the controller is instructed to install an application, it instructs the cloud driver to start the number of application machines described in the recipe. To acheive this, the cloud driver first gets the Admin object so that it can report the public IP addresses of the allocated application machines and other details. This is achieved by the controller calling the setAdmin method.
Next, the controller invokes the cloud driver's @startMachine@ method, once for each machine that must be provisioned, until all the required machines are up and running with Cloudify agent registered with the LUS, or until the request times out.

The @startMachine@ uses the following steps:
# Calls the IaaS API
# Polls the API for the machine details
# Pings the machine to makes sure its accessible
# Connects to the machine over SSH
# Installs and starts the following Cloudify agent components: GSA and GSC

The driver gets the machine information from the template attributes (corresponding to the requested template name) defined in the configuration object.

The same scenario will occur if the controller has to compensate for a crashed machine or to rebalance one of the services, as shown in the following diagram:
<img src="../../images/clouddrivers/cluster-healing.png"/>

h3(#uninstall). Uninstalling an Application

<img src="../../images/clouddrivers/uninstallApplication.png"/>

In this scenario, the cloud driver resides on the server machine. Once the controller is instructed to uninstall a deployed application, it stops the application's services and instructs the cloud driver to unininstall the machines used by the services. This is achieved by the controller calling the cloud driver's @stopMachine@ method, which in turn calls the cloud's IaaS API and instruct it to stop the relevant machines. 

<script src="https://gist.github.com/2043076.js?file=stopMachine.java"></script>

The following snippet shows how to call the cloud's IaaS API:

<script src="https://gist.github.com/2043089.js?file=terminateServerAPI.java"></script>

h3(#teardown). Tearing Down a Cloud

<img src="../../images/clouddrivers/tearDown.png"/>

In this scenario, the cloud driver resides on the client machine. At the Cloudify shell prompt, the user runs the tear down command specifying a cloud driver implementation to uninstall the management machines. This is achieved by the controller calling the cloud driver's @stopManagementMachines@ method, which in turn calls the cloud's IaaS API and instruct it to stop the relevant machines.

<script src="https://gist.github.com/2043105.js?file=stopManagement.java"></script>

h2. See Also

* "Turorial - Developing a custom cloud driver using Maven":../clouddrivers/tutorial_maven