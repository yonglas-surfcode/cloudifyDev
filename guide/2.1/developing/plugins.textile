---
layout: bt_wiki
title: Probes
category: Developing Recipes
publish: true
abstract: Describes the part of the recipe that defines probes
pageord: 10
---

This topic describes the part of the recipe that defines probes.

h2. Overview

Cloudify recipes can use probes for monitoring service configuration, performance, and availability. The collated performance metrics can be "configured":../developing/configuring_ui_section to display in the *Metrics* pane of the Cloudify web management console.

h2. Types of Probes

The following table describes the different types of probes available.

|_. Type |_. Description |
|*Built-in*|This probe is integral to Cloudify and does not need to be described in the service descriptor file. The probes collects following metrics from the processes of a service:<ul><li>Process CPU Usage</li><li>Process CPU Time</li><li>Process CPU Kernel Time</li><li>Total Process CPU Time</li><li>Process Group Id</li><li>Process User Id</li><li>Total Number of Page Faults</li><li>Total Process Residential Memory</li><li>Total Process Shared Memory</li><li>Total Process Virtual Memory</li><li>Kernel Scheduling Priority</li><li>Number of Active Threads</li><li>Available Processors</li><li>Committed Virtual Memory Size</li><li>Thread Count</li><li>Peak Thread Count</li></ul>|
|*"Scripted":../plugins_and_probes/probes*|These probes are Groovy closures that describe configuration and performance probes in the @details@ and @monitors@ closures respectively, or availability probes in @startDetection@/@stopDetection@ closure, in the service descriptor file. They are designed to provide a simple mechanism for creating probes using code snippets. <h4 class="info">We recommend that you use *Scripted* probes for monitoring.</h4>|
|*"Plugin":../plugins_and_probes/develop_your_plugin*|These probes are the same as *Scripted* probes, except that they are written using Java (or any other JVM language) classes that implement Cloudify interfaces. The classes are compiled into @jar@ files and referenced in the @plugins@ section of a service descriptor file. They are designed to provide a mechanism for creating probes using a static, type safe language.|

<br/>
Currently, Cloudify package includes the following probes:
* Process Details probe (@org.openspaces.usm.jmx.JmxDetails@ using *JMX Mbeans*)
* Process Monitoring probe (@org.openspaces.usm.jmx.JmxMonitor@ using *JMX Mbeans*)

h2. Types of Probe Monitoring

The following table describes the different types of monitoring implemented using probes.

|_. Monitoring Type |_. Description |
|*Configuration*|This type of monitor retrieves custom service details. It is implemented as follows:<ul><li>For *Scripted* probes, it is described in the @details@ section of the service configuration file.</li><li>For *Plugin* probes, it is described in the @plugin@ section of the service configuration file. The monitoring type is automatically detected based on the interface implemented by the plugin class.</li></ul>|
|*Performance*|This type of monitor retrieves custom metrics at regular intervals. It is implemented as follows:<ul><li>For *Scripted* probes, it is described in the @monitors@ section of the service configuration file.</li><li>For *Plugin* probes, it is described in the @plugin@ section of the service configuration file. The monitoring type is automatically detected based on the interface implemented by the plugin class.</li></ul>|
|*Availability*|This type of monitor detects the availability of a service instance, as follows:<ul><li>*Service Start Detector* ("@startDetection@":../plugins_and_probes/probes#start) - Detects the successful start of a specified service instance. This is used in the service lifecycle to invoke postStart events and dependent services.</li><li>*Service Stop Detector* ("@stopDetection@":../plugins_and_probes/probes#stop) - Detects a stopped service instance. This is used in the service lifecycle to initiate self-healing process that provisions a new instance of the stopped service.</li></ul>|

h2. Describing Probes

The following diagrams show the different ways of describing probes in a service recipe, depending on whether they are *Scripted* or *Plugins*:

* Scripted Probes
<img src="../../images/recipes/builtin_plugin.png"/>

* Plugin Probes
<img src="../../images/recipes/custom_plugin.png"/>
<h4 class="impt">When adding plugin probes, they and their dependencies must be saved as @jar@ files in the recipes @usmlib@ folder.</h4>

h2. The Monitoring Cycle

The following diagram shows the monitoring cycle.
<img src="../../images/recipes/monitoring_cycle.png"/>

h2. See Also

* "Using Scripted Probes":../plugins_and_probes/probes
* "Using Plugin Probes":../plugins_and_probes/develop_your_plugin