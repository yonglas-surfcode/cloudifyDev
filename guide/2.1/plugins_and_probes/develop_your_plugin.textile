---
layout: default
title: Using Plugin probes
category: Plugins and Probes
publish: true
abstract: Describes the use of Plugin probess for monitoring service configuration, performance, and availability
pageord: 200
---

This topic describes the use of *Plugin* probes for monitoring service configuration, performance, and availability.

h2. Overview

Plugin probes are customized probes written using Java (or any other JVM language) classes that implement Cloudify interfaces. The classes are compiled into jar files and referenced in the @plugins@ section of a service descriptor file. They are designed to provide a mechanism for creating probes using a static, type safe language.

The mechanism is comprised of the following components:
* A jar file--A Java class that implements the _org.cloudifysource.dsl.Plugin_ interface, optionally implementing one or more of the additional interfaces described in this topic.
* An entry in the recipe file--The plugin probe's name (@name@), the POJO class name (@className@), and a map of parameters (@config@).

The jar file that contains the compiled plugin implementation, and any additional classes and resources that it depends on, must be placed in your recipe's @usm@ folder before the application or service is installed.

h3(#interfaces). Cloudify Interfaces

The following is a list of the Cloudify interfaces you can implement in a plugin probe:
* _org.cloudifysource.usm.USMComponent_
* _org.cloudifysource.usm.InstallListener_
* _org.cloudifysource.usm.liveness.LivenessDetector_
* _org.cloudifysource.usm.locator.ProcessLocator_
* _org.cloudifysource.usm.monitors.Monitor_
* _org.cloudifysource.usm.details.Details_
* _org.cloudifysource.usm.stopDetection.StopDetector_
* _org.cloudifysource.usm.events.InitListener_
* _org.cloudifysource.usm.events.LifecycleListener_
* _org.cloudifysource.usm.events.PostInstallListener_
* _org.cloudifysource.usm.events.PostStartListener_
* _org.cloudifysource.usm.events.PostStopListener_
* _org.cloudifysource.usm.events.PreInstallListener_
* _org.cloudifysource.usm.events.PreServiceStartListener_
* _org.cloudifysource.usm.events.PreServiceStopListener_
* _org.cloudifysource.usm.events.PreStartListener_
* _org.cloudifysource.usm.events.PreStopListener_
* _org.cloudifysource.usm.events.ServiceActionListener_
* _org.cloudifysource.usm.events.ShutdownListener_
* _org.cloudifysource.usm.events.StartListener_
* _org.cloudifysource.usm.events.StopListener_
* _org.cloudifysource.usm.events.USMevent_

<br/>
To develop monitoring probes, implement the following interfaces:

|_. Type of probe monitoring |_. Interface |
| *Configuration* | _org.cloudifysource.usm.details.Details_ |
| *Performance* | _org.cloudifysource.usm.monitors.Monitor_ |
| *Availability* | <ul><li>*Service Start Detector* (@startDetection@) -- _org.cloudifysource.usm.liveness.LivenessDetector_</li><li>*Service Stop Detector* (@stopDetection@) -- _org.cloudifysource.usm.stopDetection.StopDetector_</li></ul> |

h4(info). The monitoring type is automatically detected based on the interface implemented by the plugin class.

h2(#packaged). Prepackaged Plugin Probes

Cloudify comes with several prepackaged plugin probes which you can use immediately. The following sections describe some of the more common prepackaged plugin probes.

h3. JMX Monitor

This plugin probe collects JMX attributes over a JMX-RMI connection and exposes them as Service Monitors to the service grid.

h4(impt). All return values must be numeric.

Implementing Class: _org.cloudifysource.usm.jmx.JmxMonitor_

h4. Configuration Keys

|_.Key|_.Type|_.Default Value|_.Description|
|port|int|&nbsp;|The connection port number.|
|host|String|@127.0.0.1@|The connection host.|
|username|String|&nbsp;|The JMX username. Required if JMX authentication is used.|
|password|String|&nbsp;|The JMX password. Required if JMX authentication is used.|
|*|List<String>|&nbsp;|A list of monitors. Each monitor consists of a monitor name (e.g. @Current Http Threads Busy@)) and its corresponding JMX 'ObjectName' (e.g. @jboss.web:type=ThreadPool,name=http-127.0.0.1-8080@) and JMX 'AttributeName' (e.g. @currentThreadsBusy@). The monitor name is exposed to the service grid|

h4. Example

<script src="https://gist.github.com/1745786.js?file=plugin.groovy"></script>

h3. JMX Details

Similar to the JMX Monitor, the JMX Details plugin probe collects JMX attributes and exposes them as Service Details to the service grid.

Implementing Class: _org.cloudifysource.usm.jmx.JmxDetails_

h4. Configuration Keys

|_.Key|_.Type|_.Default Value|_.Description|
|port|int|&nbsp;|The connection port number.|
|host|String|@127.0.0.1@|The connection host.|
|username|String|&nbsp;|The JMX username. Required if JMX authentication is used.|
|password|String|&nbsp;|The JMX password. Required if JMX authentication is used.|
|*|List<String>|&nbsp;|A list of monitors. Each monitor consists of a monitor name (e.g. @Current Http Threads Busy@)) and its corresponding JMX 'ObjectName' (e.g. @jboss.web:type=ThreadPool,name=http-127.0.0.1-8080@) and JMX 'AttributeName' (e.g. @currentThreadsBusy@). The monitor name is exposed to the service grid|

h4. Example

<script src="https://gist.github.com/1745799.js?file=JmxDetails.groovy"></script>

h3. Port Liveness Detector

This plugin probe is a port liveness detector that waits until a port on the local host is opened, useful for server processes that exposes a TCP endpoint. The probe also checks that the required ports are available before the process starts (i.e. it implements both _org.cloudifysource.usm.liveness.LivenessDetector_ and _org.cloudifysource.usm.events.PreStartListener_).

Implementing Class: _org.cloudifysource.usm.liveness.PortLivenessDetector_

h4. Configuration Keys

|_.Key|_.Type|_.Default Value|_.Description|
|Port|List<int>|&nbsp;|A list of connection ports.|
|Host|String|127.0.0.1|The connection host.|
|TimeoutInSeconds|int|60|The number of seconds before the plugin times out and returns @false@|

h4. Example

<script src="https://gist.github.com/1745815.js?file=PortLivenessDetector.groovy"></script>

h2(#custom). Creating your own plugin probes

The following sections describe how to create your own plugin probes.

h3. Preparing the IDE Project

To build a Cloudify plugin, set up a Java Project, and add the following @jar@ files to the project's classpath:
* All jar files in the @<cloudifyRoot>/lib/required@ folder.
* All jar files in the @<cloudifyRoot>/lib/platform/usm@ folder.

Create a new class the implements the _org.cloudifysource.dsl.Plugin_ interface. This is your plugin probe's class, which will be referenced by recipes.

h4(info). A plugin probe's class usually implements at least one other interface, which define the integration point from where the plugin can be called. For a full list of interfaces, see "Cloudify Interfaces":#interfaces.

Once you have finished developing the plugin probe, compile the project, package it as a @jar@ file, and then place the file in the @usm@ folder of the relevant service folder.

h3. The Plugin Interface

The following snippet shows the plugin interface.
<script src="https://gist.github.com/1745721.js?file=Plugin.java"></script>

These methods enables a plugin probe to access the ServiceContext API for contextual information, and to a set of configuration properties declared in the recipe.

<h4 class="impt">The order in which the methods are called is significant. The @setServiceContext@ method is called first and injects the instance of @ServiceContext@. Then, the @setConfig@ method is called and injects a @Map@ of the configuration from the recipe.</h4>

h3. Example

The following is an example plugin declaration from a tomcat recipe, using the JMX plugin probe to read JMX attributes and publish them as service monitors.

<script src="https://gist.github.com/1745731.js?file=plugins.groovy"></script>

<h4 class="warn">The plugin probe implementation class in this example is _org.cloudifysource.usm.jmx.JmxMonitor_, which receives an initial configuration of key/value pairs that map an attribute's display name to the JMX ObjectName notation of the relevant attribute, as well as the JMX port used to access the JMX Agent.</h4>