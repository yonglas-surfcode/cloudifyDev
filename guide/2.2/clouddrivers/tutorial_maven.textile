---
layout: bt_wiki
title: Tutorial - Developing a custom cloud driver using Maven
category: Developing Cloud Drivers
publish: true
abstract: A tutorial teaching you how to develop a custom cloud driver using Maven
pageord: 300
---

This tutorial explains how to develop a custom cloud driver using Maven.

h2. Before You Start

Before you start developing you cloud driver, make sure you have the following:
* "Apache Maven":http://maven.apache.org/
* "Cloudify":../setup/installing_the_cloudify_client
* The security credentials for your cloud's API calls, for accessing your machines using SSH, and if required for accessing your cloud's storage.
<h4 class="info">For example, to obtain security credetials for Openstack, perform the following steps:
<ol><li>Request a login, and its corresponding access key and secret key, from your Openstack administrator. In the @user@ section of the cloud driver configuration file, the access key and secret key correspond to the @user@ and the @apiKey@ attributes respectively.</li>
<li>Generate a SSL key pair file (required for bootstrapping machines) using "HybridFox":http://code.google.com/p/hybridfox/, and save it in the cloud driver's @upload@ folder. In the @user@ section of the cloud driver configuration file, the @keyFile@ attribute is set to the path of the SSL key pair file.
<img src="../../images/clouddrivers/cloud_driver_plugin.png"/></li></ol></h4>
* "Create cloud images":../setup/post_installation_configuration#images

h2. Configure your Maven @pom@ File

# Add the @jar@ dependency
<script src="https://gist.github.com/3144045.js?file=pom_dependency.xml"></script>
# Add the Cloudify repository
<script src="https://gist.github.com/2070752.js?file=repo.xml"></script>

h2. Create your Cloud Driver

You are now ready to develop your cloud driver. Create a new Java class that implements the _"org.cloudifysource.esc.driver.provisioning.ProvisioningDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/ProvisioningDriver.java_ interface. For examples, see "Default Cloud Driver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/jclouds/DefaultProvisioningDriver.java and "Openstack Cloud Driver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/openstack/OpenstackCloudDriver.java.

h2. Configure your Cloud Driver Configuration File

Next, configure the "@user@":#user and management "@templates@":#management sections of your cloud driver configuration file.

h3(#user). Configure the @user@ section

Configure the user, apiKey, and keyFile for your cloud.
<script src="https://gist.github.com/2042919.js?file=driver_user.groovy"></script>

h3(#management). Configure the @templates@ section

Configure the management machines and their corresponding images for your cloud.
<script src="https://gist.github.com/2070794.js?file=templates.groovy"></script>

Next, configure the @managementMachineTemplate@ attribute in your recipe to use the management machine templates:
<script src="https://gist.github.com/2070776.js?file=driver.groovy"></script>

h2. Packing and Adding to Cloudify

Finally, package your cloud driver class, and any additional classes and resources that it depends on, as a jar file and place it in the @<cloudifyRoot>/lib/platform/esm@ folder. Additionally, place your cloud driver configuration file and security certificate in the @<cloudifyRoot>/tools/cli/plugins/esc@ folder.

To make your cloud driver available to the machines in your cloud, perform the following steps:
# Repackage the Cloudify distribution file with your cloud driver files, and save it in a location that can be accessed by your cloud machine.
# On the machine where Cloudify is installed, edit the cloud driver configuration file, and in the @provider@ section, specify the @cloudifyUrl@ attribute (Cloudify installation source) as the location of the Cloudify distribution file.
<h4 class="info">When you bootstrap your cloud, Cloudify uses the local cloud driver configuration file and passes it to the bootstrapped cloud for use when provisioning machines.</h4>

h2. Overrides

The cloud driver's "upload" directory may include an optional "cloudify-overrides" sub-directory. 
If exists, the contents of the overrides directory will be copied into the Cloudify installation directory. 
This allows the cloud administrator to overwrite specific Cloudify files. 
For instance, a specialized logging configuration file may be placed at "upload/cloudify-overrides/config/gs_logging.properties".
This gs_logging.properties file will be copied to the management machine and will overwrite the default Cloudify logging configuration. 
This file will also be copied to any service machine (when it starts), if its template uses the same upload directory.


h4(info). To speed up the testing when developing cloud drivers, you can place the cloud driver jar files in the @<cloudName>/upload/Cloudify-overrides/lib/platform/esm@ folder on your local machine and Cloudify will upload them to provisioned machines from your local machine.