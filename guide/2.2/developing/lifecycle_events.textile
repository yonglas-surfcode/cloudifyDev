---
layout: default
title: Lifecycle Events
category: Developing Recipes
publish: true
abstract: Describes the events in the Cloudify application and service lifecycles
pageord: 4
---

This topic describes the events that comprise the Cloudify application and service lifecycles.

h2. Lifecycle Events Overview

Cloudify supports the following types of lifecycle events:
* "Application events":#application -- Built-in Cloudify events that are invoked by typing commands at the Cloudify shell prompt.
* "Service events":#service -- Events described in the service recipe that are invoked by the ESM(Elastic Service Manager).
* "Service instance events":#instance -- The most important lifecycle events described in the service recipe, that are invoked by the ESM.

When a lifecycle event is invoked, an "event handler":#handler script, which performs the actions required by the the event, is run. For example, if an installation event is invoked by the ESM, the corresponding installation event handler (described in the service descriptor file) is run.

h4(warn). Known Limitation: In case your *@start@* script returns, Cloudify will treat your service instance as having stopped and will therefore attempt to provision it again. To avoid this behavior, make sure your start script sleeps forever.

h2(#application). Application Events

Application events are built-in to Cloudify and currently cannot be customized in the application recipe. They are invoked by typing commands at the Cloudify shell prompt, which perform various tasks such as copying recipes to management machines, and then triggers the corresponding built-in application event.

There are two application events:
* Application install - To install an application, at the Cloudify shell prompt, type: *@install-application@* @<applicationName>@. This command provisions the required application services, starts the services in order of dependencies, and then installs the application.
* Application uninstall - To uninstall an application, at the Cloudify shell prompt, type: *@uninstall-application@* @<applicationName>@. This command stops and removes all of the application's services and Cloudify agents, and then terminates the machines on which the services ran.

<img src="../../images/recipes/app_lifecycle.png"/>

h2(#service). Service Events

Service events can be customized in the service recipe. They are triggered by the ESM. These events are useful for performing tasks just before service instances are provisioned, or after the last service instance is unprovisioned but just before the cluster is shut down. They can run on all or specific service instances.

The following diagram shows the service events lifecycle.
<img src="../../images/recipes/srvc_lifecycle1.png"/>

h2(#instance). Service Instance Events

Each service instance can be customized in the service recipe. They are triggered by the ESM.

The following diagram shows the main service instance events lifecycle.
<img src="../../images/recipes/service_instance_lifecycle.png"/>

h2(#handler). Lifecycle Event Handlers

Lifecycle event handlers are described in the @lifecycle@ section of the service descriptor file. They can be described as an external script file located in the same folder as the service recipe (supported formats include: Groovy scripts, Windows batch files, or *nix shell scripts), or as inline closures (useful when the required code is very short code). You can use scripts written in other languages by running them from within a supported external script file, providing them with context using environment variables.

The following is a complete sequence of lifecycle events to which event handlers can be allocated:

* @preServiceStart@
* @init@
* @preInstall@
* @install@
* @postInstall@
* @preStart@
* @start@
* @startDetection@
* @locator@
* @postStart@
* @preStop@
* @stop@
* @postStop@
* @shutdown@
* @preServiceStop@


The following example shows a @lifecycle@ section describing the allocation of event handlers to lifecycle events.
<script src="https://gist.github.com/2566219.js?file=lifecycle.groovy"></script>

In some cases, you require a recipe that can run on several operating systems. 
The following example shows a @lifecycle@ section describing the allocation of operating system specific event handlers to life cycle events.
<script src="https://gist.github.com/1760265.js?file=mult_lifecycle.groovy"></script>

h3(#locator). Process Locator Events

Cloudify's process monitoring, liveness detection, and stop events use process ids to perform their functions. By default, Cloudify collects the process ids by scanning the process tree launched by a service recipe and locating all the *leaf* processes (processess that did not spawn any new processes).

The process locator event (@locator@) is triggered after the @startDetection@ event and enables you to override the default list of process ids collected by Cloudify. By describing an event handler for the locator event in the lifecycle section of the service recipe, you can write your own code for collecting a list of a service's process ids and return the list to Cloudify for monitoring. This enables Cloudify to monitor all the processes of a service, and will ONLY identify a service as stopped if ALL of the associated processes have stopped.

h4(impt). Alternatively, if you do not want to monitor process at all, describe a process locator closure that returns @NO_PROCESS_LOCATORS@ (which is an empty list of process ids).
For example, this is useful when you have a service that frequenty spawns and kills processes, or when you do not want to monitor the liveness of your service.

Here's an example :
<script src="https://gist.github.com/3968608.js?file=NO_PROCESS_LOCATORS.groovy"></script>

If you do not describe a locator closure in the service recipe, Cloudify uses the default behavior.

h4(impt). If the lifecycle section of your service recipe does not describe a @start@ event handler, thereby enabling a machine to start using services preconfigured in an image, the process locator event is not triggered. Therfore, if you want to monitor the service's processes, describe the monitors section of the service recipe with the relavant monitoring code.

The folowing example shows a @locator@ closure in a service recipe.
<script src="https://gist.github.com/2965258.js"> </script>

h3. Retrieving the Service Context from within Event Handlers

The service context can be retrieved from within event handler scripts or closures using the "Service Context API":../developing/the_service_context_api. The following example shows how to use @ServiceContextFactory@ to retrieve an instance of the service context in a Groovy event handler script:
<script src="https://gist.github.com/1700385.js?file=getServiceContext.groovy"></script>

h4(warn). You can only use the @ServiceContextFactory@ from within an external Groovy file, and not from within the service descriptor file.

To access the context's instanceId, simply use the @context@ variable used to retieve an instance of the service context, as follows:
<script src="https://gist.github.com/2568113.js?file=getInstanceId.groovy"></script>

<h4 class="info">
Non-JVM based executables cannot directly access the service context. However, some of the context's information is available to them via the following environment variables:
<ul><li>LOOKUPGROUPS</li>
<li>LOOKUPLOCATORS</li>
<li>USM_CLUSTER_NAME</li>
<li>USM_APPLICATION_NAME</li>
<li>USM_SERVICE_NAME</li>
<li>USM_PU_UNIQUE_NAME</li>
<li>USM_INSTANCE_ID</li>
<li>USM_NUMBER_OF_INSTANCES</li>
<li>USM_RUNNING_NUMBER</li>
<li>USM_SERVICE_FILE_NAME</li></ul></h4>

Lifecycle events use the USM(Universal Service Manager) to invoke external event handlers, as shown in the following diagram:
<img src="../../images/recipes/context_injection.png"/>

h3. Best Practices: Lifecycle Event Handlers

When describing lifecycle event handlers, the best approach is to divide and conquer. Divide the task into simple logical steps, completing each step before starting the next step, for example:

|_. Event |_. Task Step |
| preInstall | Get the service binaries |
| install | Unzip the service binaries |
| postInstall | Tweak configuration files as required |
| preStart | Verify the installation files and folder structure |
| start | Start the service |
| postStart | Register service instances with a load balancer |

This methodology makes recipes easier to maintain and troubleshoot. Additionally, by designing external event handler scripts in this way, you can reuse them in different application recipes.