---
layout: default
title: Chef Integration Documentation
category: Chef Integration
publish: true
abstract: Cloudify-Chef integration documentation
pageord: 200
---



Cloudify 2.2 (starting from milestone 2) supports the "Opscode Chef":http://wiki.opscode.com/display/chef/Recipes platform as an additional method of conveniently deploying and configuring application services.
Chef provides a powerful multi-platform framework for configuring operating systems and services. It complements Cloudify recipes by handling the scope of intra-machine configurations. Using Chef, the lifecycle of services can be simplified as Chef takes care of keeping service configurations up-to-date with current specifications as defined by roles and cookbooks.
Before you proceed, make sure you are familiar with the basic concepts of Chef. For information, see "Chef Basics":http://wiki.opscode.com/display/chef/Chef+Basics.
In order to use Chef cookbooks for service installation, Cloudify provides a configurable base Chef recipe that does most of the Chef bootstrapping work. Typically you will only need to extend this recipe and take care of the pre and post deployment phases that Chef doesn't handle.

Sections of the page:
* "How Does Cloudify Use Chef":#how
* "Chef Installation":#install
* "Using Chef with Cloudify":#using
* "Running the MySQL Example":#example
* "Running Additional Cookbooks":#additional

h2(#how). How Does Cloudify Use Chef?

The following diagrams depict the Cloudify/Chef integration flow:
# Cloudify provisions machines and installs Cloudify agents as part of the deployment.
<img src="../../images/integrations/create_virtual_machines.png" width="655px">
# Cloudify executes a parameterized Cloudify Chef client recipe. This recipe installs and runs the Chef client.
<img src="../../images/integrations/install_chef_clients.png" width="655px">
# Chef executes the Chef cookbook and installs the required software.
<img src="../../images/integrations/chef_installs_software.png" width="655px">

h2(#install). Chef Installation

Cloudify installs the chef client once the chef recipe triggers the install step of the service lifecycle, as follows.
<script src="https://gist.github.com/3656778.js"> </script>

The @ChefBootstrap.getBootstrap@ method is a factory method pattern that selects the correct bootstrap strategy depending to the current operating system. The @install@ method invoked on the factory, installs the Chef client using @gem@ or @yum@ install.


h2(#using). Using Chef with Cloudify

The next sections of this guide assume that you have Cloudify installed and that you have "bootstrapped a Cloudify environment":../bootstrapping/bootstrapping_process, ready to install an application. For a quick introduction to setting up a Cloudify cloud, see Cloudify's "Quick Start Guide":../qsg/quick_start_guide_helloworld.

h4(info). If you'd like to use Cloudify for installing a Chef server, and using 2.2 miletone 4 or lower, please make sure to use a Ubuntu 11.10 or 12.04 Cloud Driver template, since the Chef server recipe has only been certified for Ubuntu at this point. You can find such a template for Amazon ec2 in the "Cloudify cloud drivers repo on Github":https://github.com/CloudifySource/cloudify-cloud-drivers

h3(#download). Downloading Cloudify Chef Recipes and Related Artifacts

To obtain the basic Chef recipes provided by Cloudify, download the following files and save them under @<cloudifyRoot>/recipes/services@:
* The base "@chef@" recipe:https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef
* The "@chef-server@" recipe:https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-server

In addition, download the "@simple mySQL example@":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-services/mysql-vanilla and save it to the same location.

h4(info). You can also clone the entire "CloudifySource recipes repository":https://github.com/CloudifySource/cloudify-recipes/ from Github using the command @git clone https://github.com/CloudifySource/cloudify-recipes.git@

h2(#example). Running the MySQL Example

h3. Deploying the Chef Server

To use a cookbook that leverages the Chef Server (as opposed to Chef Solo cookbooks), you can use Cloudify to deploy a Chef Server.

To deploy the Chef Server:
# Connect to the Cloudify Management machine: From the Cloudify shell prompt, type: *@connect <cloudify REST gateway URL>@*
# Deploy the Chef Server: From the Cloudify shell prompt, type: *@install-application@* @<cloudifyRoot>/recipes/services/chef-server@ (the recipe location can be any location on your local disk to which you've downloaded the Cloudify Chef server recipe).

Once the Chef server is deployed, its location is published as the "global attribute":..developing/attributes_api @chef_server_url@ in Cloudify's attributes store.

h4(info). Alternatively, you can configure Cloudify to use an existing Chef Server by setting this attribute manually using the Cloudify shell, as presented below. This can be a Chef server you installed separately or the "Hosted Chef":http://www.opscode.com/hosted-chef/ service. <br/><script src="https://gist.github.com/3705045.js?file=chef-set-attributes"></script>

h3. Loading the mySQL Cookbook

The Cloudify Chef Server recipe adds a "custom command":../developing/custom_commands to the Chef Server that allows users to upload cookbooks to the Chef server. You can point to a HTTP URL of a cookbooks tarball, a git or SVN repository URL (more on this below).

This is done by invoking the @updateCookbooks@ custom command from the Cloudify shell.
*@invoke@* @chef-server@ @updateCookbooks@ _@tar 'http://repository.cloudifysource.org/chef-cookbooks/mysql_cookbook_with_deps.tgz'@_

h3. Installing the @mysql_vanilla@ Recipe

Assuming you've succesfully uploaded the @mysql@ cookbook using the custom command above, type the following from the cloudify shell prompt:
@install-service <mysql vanilla recipe path>@

That's all! Cloudify will start installing the mySQL server recipe.
You can trace the installation progress using the Cloudify shell or the Cloudify Web UI.

h2(#additional). Running Additional Cookbooks

h3. Creating Recipes based on Chef Cookbooks

If you are not familiar with Cloudify recipes, please read "Anatomy of a Recipe":http://www.cloudifysource.org/guide/2.1/developing/recipes_overview first.

To create a Cloudify Chef recipe:
# Create an application recipe folder (e.g. "petclinic").
# Add the "application level recipe file":../developing/application_recipe describing the service dependencies in your application.
# Create a sub folder for each service (e.g. "tomcat" or "mysql")
# For each service you'd like to install using Chef, create a service recipe (@<serviceName>-service.groovy@) file that extends the @chef@ recipe, specifying the service name, icon, number of instances, etc.
<script src="https://gist.github.com/3656102.js"> </script>

Optionally, you can specify the following sections in your recipe:
* * "Monitoring":../plugins_and_probes/probes : Describes the custom performance indicators (metrics) to collect.
* * "Scaling Rules":../developing/scaling_rules : Describes the performance indicators and thresholds to use to scale your service.
* * "Custom Commands":../developing/custom_commands : Describes custom commands that add functionality. The commands can be invoked using the Cloudify shell at any time. They are usually used for various maintenance and application upgrade tasks.
* In the same folder, create a service properties file (@<serviceName>-service.properties@), specifying a property called @runParams@. For example, you can assign a groovy structure that gives an array of the Chef recipes to use, the name of the cookbook, and the default attributes.
<script src="https://gist.github.com/3656114.js"> </script>

h3. Loading Cookbooks

The Chef Server requires cookbooks to enable clients to install different services. Cookbooks can be loaded in the following ways:
* Using knife: Use the command: *@knife@* @cookbook upload [COOKBOOKS...] (options)@. For more information, see "Managing Cookbooks With Knife":http://wiki.opscode.com/display/chef/Managing+Cookbooks+With+Knife.
* Adding a cookbooks tarball or pointing to a source code repository in the @chef-server@ recipe properties file, as follows:
<script src="https://gist.github.com/3690695.js?file=cheftarball.groovy"></script>
# Pushing recipes using custom commands add to the service recipe file. For example, the @chef-server@ recipe exposes the following commands:
<script src="https://gist.github.com/3656626.js"> </script>
The updateCookbooks command can be used to upload cookbooks from different repositories such as GIT and SVN or just using a tarball. For example, I can upload the MySQL cookbook tarball by typing the following command at the Cloudify shell prompt: *@invoke@* @chef-server@ @updateCookbooks@ _@tar 'http://repository.cloudifysource.org/chef-cookbooks/mysql_cookbook_with_deps.tgz'@_

h3. Running your Recipe

Chef based Cloudify recipes are executed in the same way as other Cloudify recipes are. You use must use the Cloudify shell to connect to your Cloudify REST gateway, and then use the *@install-application@* command with the full path to your application recipe folder. You can monitor the installation progress using the Cloudify shell and Web UI.

h4(info). *Chef Version* <br/>By default, the Cloudify Chef recipe uses the latest stable version of the Chef client and server. This is defined by the property @chef.version@ in the @chef.properties@ file of the base Chef recipe. If you want to use a different Chef version, change this property to the right version. Note however that the Cloudify Chef integration is only tested with the default version in the above file. When installing Chef server using the @chef-server@ Cloudify recipe, chef-solo is used. The recipe downloads the relevant cookbooks from a tarball, whose URL is specified in the property @chef.bootstrapCookbooksUrl@ in the same properties file above. If you want to use a different version of one of those cookbooks, you will need to modify this property accordingly.

h3. Running Chef

The Chef service recipe uses the @run_chef.groovy@ script to run Chef with the correct run list.
This script gets the location of the Chef server from the Cloudify attributes store. Similarly, it gets the client certificate required for communication with the server. The run list is calculated using the Cloudify service name, or using the properties file of the service.

Chef then executes the cookbook in the normal way (completely independent of Cloudify).