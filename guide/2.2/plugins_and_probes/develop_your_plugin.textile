---
layout: default
title: Develop a Custom Monitoring Plugin
category: Plugins and Probes
publish: true
abstract: Describes how to develop custom monitoring plugins
pageord: 200

---

h1. Summary

Describes the development of Cloudify Plugins.

h1. When to develop your own plugin

The recipe file is intended to handle most of the common use cases, but it is impossible to handle all scenarios. 
Eventually, you may encounter a scenario that requires writing custom code to handle a certain kind of event or performance statistic. This is what the plugin mechanism allows. 
A plugin is a java class that implements the org.cloudifysource.dsl.Plugin interface, plus one or more additional interfaces as described here. 
The POJO class name, plus a map of parameters, is defined in the recipe file. 
When the USM loads, it will execute the plugin according to the interfaces it implements, giving the developer the required  flexibility.  
The jar file containing the compiled plugin implementation, plus any additional classes and resources it needs, should be placed in your recipe folder before it is packaged, under the usmlib directory. 
When the PU is deployed, these files will be placed in the PU's lib dir, making them available to the USM's classloader.

h1. Preparing the IDE Project

To build a USM plugin, set up a Java Project and add the following jar files to the project's classpath:
* All jar files in the lib/required directory of the GigaSpaces installation directory.
* All jar files in the lib/platform/usm directory of the GigaSpaces installation directory.

Create a new class the implements the _org.cloudifysource.dsl.Plugin_ interface. This is your plugin class, which will be referenced by recipes. 
Your plugin class will usually implement at least one other interface, which will define the integration point where the plugin will be called. 
For a full list of interfaces, see the "USM":../overview/universal_service_manager section.

Once you have finished developing the plugin, compile the project and package it as a jar file. 
This jar file should be placed in the usmlib folder under the relevant service folder.


h2. The Plugin Interface

<script src="https://gist.github.com/1745721.js?file=Plugin.java"></script>


These methods enables the Plugin to get access to the ServiceContext API for contextual information and to a set of configuration properties declared in the recipe.

<h4 class="warn">  Note the order of calls:
@setServiceContext@ is being invoked first by the USM, injecting the instance of @ServiceContext@. Then, the USM invokes the @setConfig@ injecting a @Map@ of the configuration from the recipe.</h4>


h2. Usage example

Here is a sample of a plugins declaration statement from a tomcat recipe, using the JMX plugin to read JMX attributes and publish them as Service Monitors.

<script src="https://gist.github.com/1745731.js?file=plugins.groovy"></script>

<h4 class="warn"> Note that the plugin implementation class in this sample is _org.cloudifysource.usm.jmx.JmxMonitor_, and it receives an initial configuration of Key/Value pairs which map an attribute's display name to the JMX ObjectName notation of the relevant attribute, as well as the JMX port used to access the JMX Agent.</h4>

h1. Built-in Plugins

GigaSpaces cloudify includes several plugins which you can use immediately.

h2. JMX Monitor

This plugin collects JMX attributes over a JMX-RMI connection and exposes them as Service Monitors to the GigaSpaces Service Grid. The collected data is available using the GigaSpaces Admin API. Note that all values must be numeric.

Implementing Class: _org.cloudifysource.usm.jmx.JmxMonitor_

h3. Plugin Configuration Values

|_.Key|_.Type|_.Description|
|port|int|The port that the plugin should connect to|
|host|String|The host that the plugin should connect to. Defaults to '127.0.0.1'|
|username|String|The JMX username that the plugin should connect with. This value is required only if JMX authentication is used.|
|password|String|The JMX password that the plugin should connect with. This value is required only if JMX authentication is used.|
|*|List<String>|A list with two entries. The first is the JMX 'ObjectName', the second is the JMX Attribute name. The configuration key is the name of the monitor as it will be exposed to the service Grid|

h3. Sample

<script src="https://gist.github.com/1745786.js?file=plugin.groovy"></script>

h2. JMX Details

Similar to the JMX Monitor, it exposes JMX attributes as Service Details to the GigaSpaces Service Grid. Values are available via the GigaSpaces Admin API.

Implementing Class: _org.cloudifysource.usm.jmx.JmxDetails_

h3. Plugin Configuration Values

Same as the JMX Monitor.

h3. Sample

<script src="https://gist.github.com/1745799.js?file=JmxDetails.groovy"></script>


h2. Port Liveness Detector

A port liveness detector that waits until a port on the local host is opened. Useful for server processes that expose a TCP endpoint.
This plugins also checks that the required ports are available before the process starts (i.e. it implements both _org.cloudifysource.usm.liveness.LivenessDetector_ and _org.cloudifysource.usm.events.PreStartListener_).
Implementing Class: _org.cloudifysource.usm.liveness.PortLivenessDetector_

h3. Plugin Configuration Values

|_.Key|_.Type|_.Default Value|_.Description|
|Port|List<int>|&nbsp;|List of ports that the plugin should connect to|
|Host|String|127.0.0.1|The host that the plugin should connect to|
|TimeoutInSeconds|int|60|Number of seconds until the plugin should give up and fail start detection|


h3. Sample

<script src="https://gist.github.com/1745815.js?file=PortLivenessDetector.groovy"></script>

h2. File Liveness Detector

A start detector plugin that polls a text file, looking for a line that matches a regular expression. When a match is found, the plugin succeeds.

h3. Plugin Configuration Values

|_.Key|_.Type|_.Default Value|_.Description|
|regularExpression|String|  | The Regular Expression to match|
|FilePath|String|  |The absolute path of the file to scan|
|TimeoutInSeconds|int|60|Number of seconds until the plugin should give up and fail start detection|



h3. Sample

<script src="https://gist.github.com/1745820.js?file=FileLivenessDetector.groovy"></script>
