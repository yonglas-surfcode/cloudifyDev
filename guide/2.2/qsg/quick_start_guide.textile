---
layout: default
title: Deploy a Simple App Locally
cat: Getting Started
publish: true
abstract: This guide is to help you get started with Cloudify. Start here if you're new to Cloudify
pageord: 100
--- 

The goal of this guide is to familiarize you with Cloudify in a few simple steps. For this purpose, we will use the PetClinic application (an example application that is included in the Cloudify distribution file) to demonstrate the steps required to deploy an application on a local cloud. For a guide to deploying Cloudify on EC2, see "Deploy a Multi-Tier App on EC2":../qsg/quick_start_guide_ec2.

This guide teaches you how to:
* "Install the Cloudify Shell":#step1
* "Bootstrap on a Local Cloud":#step2
* "Understand the Recipe":#step3
* "Deploy the Recipe":#step4
* "Monitor the Application":#step5
* "Scale the Application":#step6
* "Uninstall the Application":#step7
* "Teardown the Local Cloud":#step8

h2. About the PetClinic Application

The PetClinic application presented in this guide is a port of the "(newwindow)Spring PetClinic":http://static.springsource.org/docs/petclinic.html application to "(newwindow)Grails":http://grails.org/ and MongoDB, and uses the Grails GORM bindings to MongoDB. The users of the application are employees of the clinic who, in the course of their work, need to view and manage information regarding veterinarians, the clients, and their pets.

The application's environment is based on the following 2-tier architecture:

|_. Tier |_. Service |
| Web and Business Logic Tier | A Grails platform deployed on Apache Tomcat server |
| Database Tier | A MongoDB server |

h4(info#n1). The number of service instances can be easily configured by modifying the numInstances attribute in the relevant Cloudify recipe file (e.g. @<service-name>-service.groovy@). For an example, see the "(newwindow)10-Minute EC2 Quick Start Guide":../qsg/quick_start_guide_ec2 that shows how to deploy the PetClinic application on Amazon EC2 using a sharded MongoDB data tier with multiple @mongod@ service instances.

h4(impt). When you install MongoDB on Windows 7, you must run MongoDB with administrative credentials. For more information, see the "Installing Windows 7" section of the "(newwindow)Windows Service":http://www.mongodb.org/display/DOCS/Windows+Service page.

h1(#step1). Step 1 - Install the Cloudify shell

This step describes how to install the Cloudify shell on your local machine.

h2. Prerequisites

Before you install the Cloudify shell, make sure that your environment meets all the minimum requirements. For more information, see <span class="inlineExpandBtn" title="../setup/cloudify_prerequisites">Cloudify Prerequisites</span>.

h2. To install the Cloudify shell

# Install @Java@ on your machine.
# "(newwindow)Download(Click here to download the Cloudify zip file)":http://bit.ly/ztbg9u and unzip the Cloudify distribution file.
# Go to the @<cloudify installation folder>/bin@ folder, and then run @cloudify.bat@ (Windows) or @cloudify.sh@ (==*==nix) depending on the operating system running on your machine.

For more information, see <span class="inlineExpandBtn" title="../setup/installing_the_cloudify_client">Installing the Cloudify Shell</span>.

h1(#step2). Step 2 - Bootstrap on a Local Cloud

This step describes how to bootstrap Cloudify on a local cloud. A local cloud is a full-fledged cloud emulation environment that allows the user to run all Cloudify management and application services on a single machine.

To bootstrap on a local cloud, at the Cloudify shell prompt, type: *bootstrap-localcloud*

The installation progress is displayed for the following Cloudify components as the local cloud is bootstrapping:
* *The Cloudify agent*--The component that runs on all Cloudify managed machines that is responsible starting application services, gathering monitoring metrics, and monitoring their availability.
* *The management service*--The "brains" of Cloudify that is responsible for provisioning machines, triggering the deployment process, and aggregating the metrics collected by each Cloudify agent.
* *The REST gateway service*--The service that exposes a RESTful interface to the services provided by the management service.
* *The Web management console service*--The service that provides a Web-based GUI to the Cloudify environment and allows you to easily monitor your applications.

h4(info). To obtain a list of all the available commands, type @<tab>@, or to view help for a specific command, type @[cmd] --help@. Note that the Cloudify shell automatically connects to the REST service such that you do not have to run the *connect* command separately. For more information about Cloudify commands, see "(newwindow)Command Line Reference":../recipe/command_line_reference.

<img src="../../images/setup/shell_boot3.jpg" width="630" height="300" />

Your local cloud is now ready for deploying the PetClinic application.
For more information about bootstrapping on a local cloud, see <span class="inlineExpandBtn" title="../bootstrapping/bootstrapping_localcloud">Boostrap a Local Cloud</span>.

h1(#step3). Step 3 - Understand the Recipe

Before deploying the application, you must configure the recipe that will be used for the deployment. In this example, we have already configured this for you using single service instances of the MongoDB and the Tomcat services; therefore the recipe can be used as-is without any further configuration and you can proceed to the next step. However, we recommend you read about recipes, and then optionally configure the number of service instances used by the services defined in the recipe.

For more information about recipes, click <span class="inlineToggleExpandBtn">here</span>.
<div class="expand">

h2. <span class="inlineToggleExpandBtn">Anatomy of a Recipe</span>

<div class="expand">
Recipes are the execution plans for installing, starting, orchestrating, and monitoring your application stack without changing the application code or architecture. The deployment files and folders are located in the application's recipe folder, in our example @<cloudifyRoot>/recipes/apps/petclinic-simple@. The following is a list of the application recipe's files and folders that are used to deploy the PetClinic application:
* The application descriptor file: @petclinic-mongo-application.groovy@
* The MongoDB recipe folder
* The Tomcat recipe folder

<br />
The files required to run the MongoDB and the Tomcat services can be found in the corresponding mongod and tomcat subfolders. 

The following diagram depicts the PetClinic application's recipe file and folder structure.
<img src="../../images/setup/pet_clinic_anatomy4_211ga.jpg" />

h4(info). The *mongod* service extends the mongod service in ../../../services/mongodb/mongod, and the *tomcat* service extends the tomcat service in ../../../services/mongodb/tomcat.

For more information about recipes, see "(newwindow)Anatomy of a Recipe":../developing/recipes_overview
For more information about extending services, see "(newwindow)Extending Service Recipes":../developing/extending_recipes.
</div>

h2. <span class="inlineToggleExpandBtn">The Application Recipe</span>

<div class="expand">
Every recipe must have an application descriptor file that describes the services (tiers) it requires and their interdependencies.

In our example, the PetClinic application has 2 services, each service containing a single <acronym title="It is important to distinguish between a service and a service instance. A service can be defined as a cluster which is composed of at least one service instance. Every service instance resides on one host, typically this would be a virtual machine, whereas a service is the aggregation of all service instances and as such can span multiple machines">service instance</acronym>:
* Tomcat  (We called this service: @tomcat@)
* MongoDB (We called this service: @mongod@)

The following shows the corresponding application descriptor file for the PetClinic application.

<script src="https://gist.github.com/2291478.js?file=minimized_petclinic_app_recipe.groovy"></script>

From the application descriptor file, we can learn the following information:
* The names of the services required to run the application.
* The @tomcat@ service depends on the @mongod@ service; hence the @tomcat@ service will not start until the @mongod@ service has successfully started.

For more information, see "(newwindow)The Application Recipe":../developing/application_recipe.
</div>

h2. <span class="inlineToggleExpandBtn">The Service Recipe</span>

<div class="expand">
Every service has its own mandatory service recipe based on a "(newwindow)recipe structure":../developing/recipes_overview that is common to all of them.

Each service folder contains all the information required by the service. The following is a list of the service recipe's files and folders:

* A service descriptor file (@<service name>-service.groovy@).
* An optional service properties file (@<service name>.properties@) which contains configurable parameters that can be used by the recipe.
* All the specified lifecycle script files, e.g. @<service name>_install.groovy, <service name>_start.groovy@, etc.
For example, the @<service name>_install.groovy@ script will typically run during the installation of the service, if it's specified in the @lifecycle@ section of the service descriptor file.
<h4 class="info">You can specify any preferred name for lifecycle handlers, as long as you specify their exact names in the corresponding service file.</h4>
* An optional folder called @usmlib@ which must contain all the jar files of your custom probes.
Cloudify is distributed with "(newwindow)Scripted Probes":../plugins_and_probes/probes that you can configure as required. However, you can also develop your own "(newwindow)Plugin Probes":../plugins_and_probes/develop_your_plugin and add them to the recipe in this folder. For example, in the PetClinic application we used our Cloudify Mongo Plugin Probe "(newwindow)cloudify-mongo-plugin.jar":http://www.gigaspaces.com/wiki/download/attachments/55935974/CloudifyMongoPlugins_sources2_0.zip to retrieve details from the @mongod@ service, and to detect port liveness.

For more information, see "(newwindow)The Service Recipe":../developing/service_recipe.

h3. <span class="inlineToggleExpandBtn">The Lifecycle Scripts</span>

<div class="expand">
If you view any of the Groovy scripts in the tomcat recipe folder, and you will notice that they are essentially regular groovy scripts in which you can write any Groovy or Java code. The only difference is the use of the Cloudify API ("(newwindow)ServiceContext API":../developing/the_service_context_api). This API exposes the service runtime details to the script, so that a service can locate and use the details of another service within the same application. For example, in our PetClinic application we use the API to expose the port of the @mongod@ service instance to the all the other services in the PetClinic application.

For more information, see the following topics:
* "(newwindow)Lifecycle Events":../developing/lifecycle_events
* "(newwindow)Custom Commands":../developing/custom_commands
* "(newwindow)Probes":../developing/plugins
* "(newwindow)Configuring the Web Management Console":../developing/configuring_ui_section
</div>

h3. <span class="inlineToggleExpandBtn">Getting the Service Binaries</span>

<div class="expand">
The service binaries, in our example the Tomcat and MongoDB distributions, can be quite large to upload to machines being provisioned for a service instance. Therefore, when provisioning machines the recipes fetch the binaries from a specified file repository (this can be any http, ftp or file system location) and are not uploaded with the recipe, thus improving the performance and responsiveness of the Cloudify environment. The binaries are fetched using Groovy's built in support for "(newwindow)Apache Ant":http://ant.apache.org called "(newwindow)AntBuilder":http://groovy.codehaus.org/api/groovy/util/AntBuilder.html and the Ant @get@ task.
</div>

h3. <span class="inlineToggleExpandBtn">The MongoDB Recipe</span>

<div class="expand">
The MongoDB (@mongod@) Recipe does the following:
* Calculates its port based on its instance ID and properties file, and then notifies the serviceContext API so that other services can communicate with it
* Downloads, unzips, and installs the Mongo binaries on the provisioned machine
* Starts the MongoDB Server process
* Detects whether the server started successfully by using the MongoLivenessDetector plugin
* Collects metrics (Active Read Clients, Active Write Client, etc.) for displaying in the Cloudify web management console

The @mongod@ service descriptor file is @<cloudify root>/recipes/apps/petclinic/mongod/mongod-service.groovy@.
</div>

h3. <span class="inlineToggleExpandBtn">The Tomcat Recipe</span>

<div class="expand">
The Tomcat Recipe does the following:
* Downloads, unzips, and installs the Tomcat binaries on the provisioned machine
* Configures the Tomcat HTTP Port and then enables remote JMX
* Starts the Tomcat process (using the bin/catalina script)
* Detects whether the server started successfully by using the PortLivnessDetector plugin to check port 8080
* Monitors Tomcat performance by using the JMX Monitoring plugin

The tomcat service descriptor file is @<cloudify root>/recipes/apps/petclinic/tomcat/tomcat-service.groovy@.
</div>

h3. <span class="inlineToggleExpandBtn">Configuring @tomcat@ with the @mongod@ port</span>

<div class="expand">
In this example, we use the ServiceContext API and its k/v store mechanism, to share the @mongod@ service instance (host address and port) details with the @tomcat@ service instance.

Firstly, the MongoDB recipe exposes the details of the @mongod@ service instance, as follows:

<script src="https://gist.github.com/2291670.js?file=exposeMongodService.groovy"></script>
  
Then the Tomcat recipe retrieves the details, as follows:
<script src="https://gist.github.com/2291774.js?file=retrieveMongodService.groovy"></script>

Once this is completed, the @tomcat@ service instance knows the host address and port of the @mongod@ service instance, and can communicate with it.
</div>
</div>
</div>

h1(#step4). Step 4 - Deploy the Recipe

Now that you are more familiar with the recipe mechanism, let's deploy the application. At the Cloudify shell prompt, type: *install-application* @-timeout 10 <cloudify root>/recipes/apps/petclinic-simple@

h4(warn). Currently the Cloudify shell does not support backslashes so you must use a forward slash (@/@) as your path separator even if you are running on Windows.

In this example, we specified a timeout of 10 minutes (@-timeout 10@) to allow sufficient time for the recipe to download the service binaries (Tomcat and MongoDB distributions) from the web and install the application. Optionally, you may add the @--verbose@ switch to display additional information during the installation process.

h4(info). If an error occurs during installation, an error message is displayed and the installation is aborted. The error message will help you identify at which phase the problem occurred and for which service it.

Once the application installation has successfully completed, you can access the PetClinic application by browsing to @http://localhost:8080/petclinic@.

To test the application, try adding a few owners and pets, and then search for them to make sure that the application is functioning correctly. 

h1(#step5). Step 5 - Monitor the Application

To monitor the application, open a web browser, and then browse to the <span class="inlineExpandBtn" title="../monitoring/the_web_management_console">Web Management Console</span>. Once the page is loaded, simply login anonymously without specifying a username or password.

h4(info). You can find the exact URL displayed in the Cloudify shell when bootstrapping the local cloud. The default URL is @http://localhost:8099@.  

Test the Cloudify web management console as follows:
* Click the *Topology* link, and then click on the Topology tab.
* Use the *Select Application* combo box to navigate to the PetClinic application. You should see an application map that corresponds to the PetClinic application recipe.
* Each service has a real-time status and shows the number of actual service instances. Click one of the services in the application map.

<br />
In the lower pane, you can navigate between several views:
* *Metrics view*--Displays the service metrics configured in the UI configuration section of the recipe
* *Infrastructure view*--Lists the virtual hosts on which your application services are deployed.
* *Services view*--Displays the individual service instances and correlates their various metrics.

<br />
<img src="../../images/setup/petClinic_in_webui_screenShot4.jpg" width="630" height="300"/>

h1(#step6). Step 6 - Scale the Application

Cloudify supports two methods for scaling a service: 
# "Manual Scaling":#ms1
# "Automatic Scaling":#sr1

h2(#ms1). Manual Scaling 

If you want to set the number of service instances manually, type the following command in the Cloudify shell: *set-instances* @service-name number-of-required-instances@

h4(info). In order to enable manual scaling, in the service descriptor file, you must set the *elastic* attribute to @true@.

For example, by running the following command, Cloudify adjusts the number of tomcat service instances to three: *set-instances* @tomcat 3@
If the @tomcat@ service has *two* instances prior to invoking the command, it *increases* the number of @tomcat@ service instances to three. However, if the @tomcat@ service has *five* instances prior to invoking the command, it *decreases* the number of @tomcat@ service instances to three.

h2(#sr1). Automatic Scaling (Scaling Rules)

Cloudify enables each service to define a scaling rule for deciding if the service needs to scale-out or scale-in. For example, Cloudify can decide based on the average number of busy threads, to increase the number of @tomcat@ service instances or to decrease them.

Here's a snippet of a @tomcat@ service file : 
<script src="https://gist.github.com/2580529.js?file=mini_tomcat_auto_scaling.groovy"></script>

For more information, see <span class="inlineExpandBtn" title="../developing/scaling_rules">Scaling Rules</span>.

h1(#step7). Step 7 - Uninstall the Application

To uninstall the application, at the Cloudify shell prompt, type: *uninstall-application* @petclinic@

h1(#step8). Step 8 - Teardown the Local Cloud

To shut down the local cloud installation, at the Cloudify shell prompt, type: *teardown-localcloud*.

<h4 class="impt">To see it in action, watch the demonstration <a href="http://www.cloudifysource.org/cloudifysourcetv#bUmt6NX7M9I" rel="bUmt6NX7M9I" class="youtube wtd" data-bitly-type="bitly_hover_card">video</a>.</h4>

h1. What's Next?

* Install the extended PetClinic Application on "EC2":../qsg/quick_start_guide_ec2.
* Learn more about "recipe development":../developing/recipes_overview.
* Learn more about cloud portability and "cloud drivers":../clouddrivers/cloud_driver.
* Learn how to "develop a monitoring plugin":../plugins_and_probes/develop_your_plugin.
* Learn more about monitoring your application with the "Cloudify Web Management Console":../monitoring/the_web_management_console.

