---
layout: default
title: The Attributes API
category: Developing Recipes
publish: true
abstract: Describes the Attributes API, which is used for sharing information between services of the same application
pageord: 8
---

Service instances across an application sometimes need to share information. For example, a service instance may want to share its monitoring port (that is determined at runtime) with other service instances.

Cloudify provides this mechanism via the Attributes API. Attributes can be assigned in an application, service, or service instance context, and once assigned, they can be read and modified by any of the service instances that exist in the application's context.

h4(warn). You can only use attributes for an application, service, or service instance once it is running.

The following example shows the assignment of @myValue@ to the @myKey@ attribute only after the service instance has started. Additionally, the value of the @otherKey@ attribute of the @otherService@ service is printed.
<script src="https://gist.github.com/1704821.js?file=gistfile1.groovy"></script>

h2. The API syntax

The following list shows the syntax for assigning values to attributes of applications, services, and service instances:
* @context.attributes.thisInstance.myKey = "myValue"@--Assigns @myValue@ to the <b>@myKey@</b> attribute of the current service instance context. This is equivalent to: @context.attributes.thisInstance["myKey"] = "myValue"@.
* @context.attributes.thisService.myKey = "myValue"@--Assigns @myValue@ to the <b>@myKey@</b> attribute of the current service context. Note: There is only one <b>@myKey@</b> attribute per service context. Therefore, any updates to its value by any instance of any service, will overwrite the value.
* @context.attributes.thisApplication.myKey = "myValue@--Assigns @myValue@ to the <b>@myKey@</b> attribute of the current application context. Note: There is only one <b>@myKey@</b> attribute in a entire application context. Therefore, any updates to its value by any instance of any service, will overwrite the value.

A service instance can read or modify any of the attributes of other service instances and services. This is done by specifying the service name instead of @thisService@. For example:
* @context.attributes.tomcat.myKey = "myValue"@--Assigns @myValue@ to the <b>@myKey@</b> attribute of the @tomcat@ service context.
* @context.attributes.tomcat.instances[1].myKey = "myValue"@--Assigns @myValue@ to the <b>@myKey@</b> attribute of tomcat service instance context with id 1. Note: service instance Ids are indexed starting from 1.

h4(info). You *cannot* access attributes of other applications. You can only access attributes that belong to the current application, its services, and their service instances. 

The following example shows how to use the @each@ method to iterate through the attributes of service instances: @context.attributes.thisService.instances.each{println it.myKey}@

h2. Reading and Writing Attributes

Attributes can be retrieved using the @ServiceContextFactory@ of the "Service Context API":../developing/the_service_context_api.
The following example shows how to retrieve the @myKey@ attribute of the current service.
<script src="https://gist.github.com/2566252.js?file=retrieveAttributes.groovy"></script>

The following example shows how to read and write application and service attributes.
<script src="https://gist.github.com/1703703.js?file=readWriteAttr1.groovy"></script>

The following example shows how to read and write attributes of the current service instance, and service instances of other services.
<script src="https://gist.github.com/1703758.js?file=wRInstanceAttrs.groovy"></script>