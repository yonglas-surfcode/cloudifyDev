---
layout: bt_wiki
title: Configuring a Traditional Data Center [BYON]
category: Installation & Setup
publish: true
abstract: Explains how to bootstrap Cloudify and deploy applications in a distributed environment utilizing existing servers that are not in the cloud
pageord: 700
--- 

Cloudify can be configured to leverage your existing servers (virtualized or non-virtualized) that are not in the cloud for deploying and managing Cloudify services. This type of utilization of existing servers is referred to as "Bring Your Own Node" (BYON).

This topic provides instructions for configuring a BYON cloud for Cloudify.


h2. Prerequisites

* Cloudify shell (for information about installing the Cloudify shell, see "Installing the Cloudify Shell":../setup/installing_the_cloudify_client)

h2. Configuring the BYON Cloud Driver

The main BYON configuration file is @byon-cloud.groovy@ and is located in the @<cloudifyRoot>/tools/cli/plugins/esc/byon@ folder.


<h4 class="impt">For setting the configuration file, we reccomend that you use "parameterization of the cloud driver configuration":../clouddrivers/cloud_driver#gstr, but you can also set the configuration file directly as shown in the following example (of a @byon-cloud.groovy@ file):</h4>

<script src="https://gist.github.com/3273916.js?file=byon2.2_m2-driver.groovy"></script>

Before using the configuration file, specify the appropriate values for the attributes as explained in the following sections:

h3. The Configuration Section

|_.Attribute|_.Description|
|managementMachineTemplate|The name of the template to use for management machines|

<h4 class="info">For each machine that does not specify a user name and password, Cloudify uses the remoteUsername and remotePassword defined in the configuration section.</h4>

h3. The Provider Section

|_.Attribute|_.Description|
|provider | The name of the provider (*must be "byon"*)|
|localDirectory| The folder on the local machine in which the bootstrap-management.sh script resides|
|machineNamePrefix| The prefix to add to the name of each instance (this does not apply to management instances)|

h3. The Templates Section

The configuration file comes preconfigured with the "SMALL_LINUX" template. You may change this name, or add more templates as required to meet your application needs. For each template, you should specify the following attributes:
* node id (id) - this is an alias for the host/VM.
* node ip (ip) - the IP address of the host/VM. Cloudify uses a private IP address and assumes that the Cloudify shell, used to initiate the bootstrap and install process, is in the same LAN as the IP addresses specified in the configuration file.
* remoteDirectory - The folder on the machine being provisioned to use as a working folder
* username - SSH user name
* password - SSH password

h4(info). The Cloudify BYON cloud driver allocates machines from the pool randomly. Future releases will support allocating machines based on the order specified within the pool.

The following examples shows the SMALL_LINUX template with vm1 ,vm2, and vm3 in the pool of machines:

<script src="https://gist.github.com/2337401.js?file=templates.groovy"></script>

Once the SMALL_LINUX template is defined, to associate the template with a service you must specify it in the service file included with the recipe, as follows:

<script src="https://gist.github.com/2337408.js?file=cassandra.groovy"></script>

h3. IP address and Id Configuration

To add multiple machines without specifying individual IP addresses, you can use a range of machine IP addresses. For example, you can specify the following ranges of IP addresses:
* @10.10.10.10-10.10.10.20@ (normal notation IP address range)
* @10.10.10.8/29@ (CIDR notation IP address range which translates to @10.10.10.8-10.10.10.15@).
The Ids for these machines are generated by concatenating the prefix you define in the @id@ attribute with an index created by Cloudify (e.g. vm1, vm2, etc.)
You can also customize the id using the parameter placeholder @{0}@ which Cloudify will replace with an index value (e.g. vm{0}-lab will generate vm1-lab, vm2-lab, etc.).
<script src="https://gist.github.com/2337455.js?file=complextemplates.groovy"></script>

h3. bootstrap-management.sh

The bootstrap-management.sh script is used to install Cloudify on each machine being provisioned and start the Cloudify agent. In some instances, you may need to configure the script to suit your environment. The following is a list of parameters that are available to be configured:
* *LUS_IP_ADDRESS* - The IP address of the management machine that runs a LUS and ESM. This may be IP address of the local machine. (Required)
* *GSA_MODE* - "agent" or "management". (The default is "management")
Cloudify can run in 2 different modes: 
*# As a management machine that runs all the management services: ESM, REST, ... - At least one management machine is required in a Cloudify environment. 
*# As an agent that runs a processing unit (PU) but doesn't perform Cloudify management tasks - It is used for deployment of applications and services. 
* *NO_WEB_SERVICES* - "true" if web-services (REST, webui) should not be deployed. (only if GSA_MODE is not 'agent')
* *MACHINE_IP_ADDRESS* - The IP address of this server. (Useful if it has multiple NICs)
* *MACHINE_ZONES* - This is required if this is not a management machine.
* *WORKING_HOME_DIRECTORY* - The working folder specified in the configuration file to which installation files were copied (Cloudify installation files, ...)
* *CLOUDIFY_LINK* - If this URL is valid, it will be downloaded to @$WORKING_HOME_DIRECTORY/gigaspaces.zip@

<h4 class="info"><ul><li>The @bootstrap-management.sh@ is copied (via SSH) from the client's *localDirectory* (@<cloudifyRoot>/tools/cli/plugins/esc/byon/upload@) to the *remoteDirectory* on each provisioned machine.</li>

<li>SSH is used to run @bootstrap-management.sh@ on machines being provisioned.</li>

<li>As mentioned above, the remote directory is configured in the cloud's groovy file (*remoteDirectory* in @byon-cloud.groovy@) and its default is @/tmp/gs-files@.</li>

<li>When starting multiple machines, the script is executed in different threads running in parallel.</li>
</h4>

h3. Multiple Templates Usage

Multiple templates can be used, allowing you to have separate pools for management services and for application services. The following shows an example of multiple templates defined in the configuration file.
<script src="https://gist.github.com/2823590.js?file=byon.groovy"></script>
The following shows corresponding services files using the APPLICATION_TEMPLATE template for provisioning application machines:
<script src="https://gist.github.com/2343730.js?file=ServicewithTemplate3.groovy"></script>

h3. BYON On Windows

Here's a snippet of a byon driver for Windows : 
<script src="https://gist.github.com/tamirko/4722175.js"></script>


h2. What's Next?

"Bootstrapping a Traditional Data Center [BYON]":../bootstrapping/bootstrapping_byon