---
layout: default
title: The Recipe Debugger
category: Developing Recipes
publish: true
abstract: Explains how to use the Cloudify's recipe Debugger. 
pageord: 13
---

h2. Debugging Recipes

One of the challenges in developing Cloudify services is that they are often stateful. 
That means that they publish and consume runtime attributes of other service instances and other services. 
Furthermore, they have runtime context of their own, containing their IP addresses, ports, number of instances and other metadata. 

To solve these runtime debugging problems we added a new remote debugging capability that enables users to debug shell scripts and groovy scripts in place. 
The idea behind the Cloudify debugger is to run groovy and shell life cycle event scripts through an augmented launcher that uses an SSH session and allows the end user to connect remotely and debug the script in the actual cloud environment.

h4(impt). Currently the debugger only works on linux

h2. Usage 

The debugger allows users to pause the recipe execution in any of the following scenarios :
# Before the execution of a lifecycle script 
# After a lifecycle script has terminated with an error
# After the execution of a lifecycle script.

Users can specify if the debug pause applies to a specific lifecycle script or to all scripts.

h4(info). Currently the debugger does NOT work when the lifecycle event handler is an inline closure.

Users can set up debug breakpoints by using new options in the CLI.

h2. Examples of usage

# *@install-service -debug-all -debug-mode onError serviceName@*
# *@install-service -debug-events install -debug-mode after serviceName@*
# *@install-service -debug-events start serviceName@*

* *@-debug-mode@* can be one of the following : instead, after or onError. - Defaults to instead.
* *@-debug-all@* debugs all the supported lifecycle events.
* *@-debug-events@* debugs the specified events.

h4(info). The following example uses tomcat as a service name.

h2. A Step by Step Example

1. Install the tomcat recipe : 
<script src="https://gist.github.com/tamirko/5344899.js"></script>

Once the service installation starts and the recipe reaches the requested debugging point, a message is displayed in Cloudify shell prompt. This message notifies the users that they can "now" connect to the debgger session :
<script src="https://gist.github.com/tamirko/5344926.js"></script>

2. Go to the Cloudify Web UI, get the IP address of the service (tomcat) instance :
<a class="fancybox-media" href="../../images/developing/apachelb_in_webui.jpg"><img src="../../images/developing/apachelb_in_webui_thumb.jpg" alt="pic is missing" /></a>
 
3. Ssh to tomcat VM and invoke the *@debug@* command on the tomcat VM.
   Once the user is connected to the debugger session, there are several debugging options that can be used from the command prompt:
<script src="https://gist.github.com/tamirko/5344757.js"></script>

h4(info). ctrl+d or "exit" freezes everything, so that (for example) you can come back after two hours and continue debugging from the same point.

4. Setup your remote debugging host (the tomcat IP address from above) and port (10000) in your IDE.
   For example, in Eclipse : 
* Create a groovy project
* Add the groovy script to that project
* Create a remote debug configuration for the tomcat IP address from above and port 10000

<br/>

<b>Here's how you can configure remote debugging of groovy scripts in intelliJ:</b>
# If the groovy script that you want to debug is part of a groovy module in your intelliJ project skip to 3
# File->New Project
## Choose your Groovy Module
## Project Location: <location of your service root directory> e.g for tomcat the folder named tomcat
## Click Next
## Use Library: <your groovy home directory>
## Click Finish
# Goto Run->Edit Configurations
## Click Plus Symbol->Remote
## Fill in the form with Name:<your configuration name>
### Host:<the host the debug console is waiting on>
### Port:<the port the debug console is waiting on - 10000 by defualt>
### Search sources using module's classpath: <the module in which your script is>

You can then add a breakpoint to your script and debug by pressing the debug symbol or Shift+F9 while your remote configuration is showing up.

Click on the following image to learn how to configure remote debugging of groovy scripts in Eclipse:
<a href="http://www.youtube.com/watch?v=gzv6mgISE0s" rel="gzv6mgISE0s" class="video fancybox-media"><img src="../../images/developing/remote_groovy_debug_eclipse.jpg" alt="pic is missing" /></a>

5. Invoke *@run-script tomcat_install.groovy@*
   Cloudify will pause until IDE connects.   

6. Add breakpoints to your groovy code (in your IDE).

7. Debug away ... 

8. Once it's done and you're happy with the results : 
   * Ssh to the tomcat VM again 
   * Invoke *@finish@*
   * Exit from the VM
   
<br/> 
Cloudify will go on with the next steps/events of the recipe. 

