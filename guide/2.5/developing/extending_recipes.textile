---
layout: default
title: Extending Service Recipes
category: Developing Recipes
publish: true
abstract: Explains how to create new recipe from existing one by overriding only the elements you wish modify
pageord: 6
---

Cloudify recipes are like object-oriented classes in that they can be extended.

h2. Why Extend?

In many scenarios, you may want to create a new service which is based on an already existing service, overriding only parts of it with your own modifications. For example, you may want to use the Tomcat recipe (included in the Cloudify distribution under @<cloudifyRoot>@) with a few modifications, without needing to copy the existing recipe and all of its relevant content.

Cloudify provides this mechanism by allowing you to extend recipes. Extending recipes allows new recipes to inherit elements from their parent recipes and only describe elements they want to ovverride.

h2. How does Extending Work?

Extending recipes follows the following simple rules:
* *Recursion*--The extend mechanism is recursive, which means that one service can extend another service, that extends a third service, and so on.
* *Inheritance*--Each extension level inherits from its parent only if a more specific element does not exist in the child recipe.

Thus, a new recipe inherits all attributes and files from its parent recipes only if the attributes or files do not exist in the new recipe.

h4(info). When copying files from a parent recipe to a child recipe, they are copied to the child service's deployment folder.

Extending recipes works for any of the elements of a service recipe, whether they are top-level elements (e.g. @lifecycle@) or more specific elements (e.g. @lifecycle -> init@).

For example, consider the following parent service recipe:
<script src="https://gist.github.com/1821896.js?file=service.groovy"></script>

The extending service recipe can, for example, add the @preStop@ event handler and/or change only the @init@ event handler, while keeping the @postStart@ event handler of the extended service.

<script src="https://gist.github.com/2566234.js?file=service.groovy"></script>

h2. Extending Recipes

Cloudify makes extending a recipe easy.

h3. To extend a recipe
# In your application recipe, create a new service recipe file (e.g. @my-tomcat-service.groovy@).
# In the service block, specify the @extend@ attribute using the path to the service recipe being extended as its value, as follows:
<script src="https://gist.github.com/1821880.js?file=service.groovy"></script>
<h4 class="warn">For the extension to work, the @extend@ attribute must be the first attribute in the service block.</h4>

h2. A few rules of thumb 

* Every lifecyle event handler file that exists in a child(or even descendent) recipe, overrides the base recipe.
* Every lifecyle event handler which is specified in the service file of a child(or even descendent) recipe, overrides the base recipe.
* Every property that exists in a properties file in a child(or even descendent) recipe, overrides the base recipe.

