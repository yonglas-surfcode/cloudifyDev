---
layout: default
title: Service Recipes
category: Developing Recipes
publish: true
abstract: Describes the part of the recipe that describes a specific application service including its configuration, lifecycle, and its management
pageord: 3
---

A service recipe is comprised of the service descriptor file and its supporting files.

h2. Service Descriptor File

The service descriptor file describes the following information:
* *"General":#general*: Describes the service name, service type, number of service instances, and the service icon filename
* *Compute*: Specifies the template name to use when provisioning machines. The template name corresponds to a template name specified in the cloud driver, that describes the hardware profiles a the pool of machines that can be used when provisioning service instances. A hardware profile maps to a specific hardware setup and image size (e.g. in Amazon EC2 it would map to the combination of the hardware id [m1.small, c1.medium, etc.] and an ami id). This allows for clear separation between the application recipe and the cloud environment on which it runs. For more information, see "Cloud Drivers":../clouddrivers/cloud_driver.
* *"Lifecycle Events":lifecycle_events*: Maps events to handling scripts or closures and, as such, is the most important part of the service recipe. An event handler can be an external Groovy script, a shell script, or a batch file (depending on the operating system). The handlers must reside in the service folder
<h4 class="info">Cloudify can use the same recipe for different operating systems, as long as you specify the relevant instructions for each within the recipe, or the instructions are generic to all of them. The use of handler files is optional. For example, if a post-installation script is not specified in the service recipe, then Cloudify does not execute a handler after the service has been installed.</h4>
* *"Custom Commands":custom_commands*: Maps custom commands to handling scripts that can be invoked as commands using the Cloudify shell
* *"Probes":plugins*: For monitoring service configuration, performance, and availability
* *"UI Layout":configuring_ui_section*: Describes the layout to use for displaying the collected metrics in the "Cloudify web management console":../monitoring/the_web_management_console
<h4 class="info">In future releases, Cloudify will also support "*provided services*". These services are not provisioned by Cloudify and are only monitored for availability.</h4>

h3(#general). General Section

The *General* section describes the following attributes:

|_. Attributes |_. Description |
| @name@ | The service name is used to identify this service by the various Cloudify management and monitoring tools. Therefore, the name must be unique across all services that are managed by the same Cloudify controller. |
| @icon@ | The optional image file to use as an icon for this service in the *Application Map* that is displayed in the "Cloudify web management console":../monitoring/the_web_management_console.
<h4 class="info">It is recommended that the image will not exceed the size of 20x20 pixels, as this can burden the image loading within the Web Management Console, thus resulting in slower performance. Images exceeding the specified dimensions will be scaled to fit regardless.</h4>|
| @type@ | The service type is used by the Cloudify web management console to determine the location of this service in the *Application Map*. If you do not specify an @icon@ in this section, the service type is used to determine the default icon to display in the *Application Map*. The following service types are supported:
<ul><li>WEB_SERVER</li>
<li>APP_SERVER</li>
<li>DATABASE</li>
<li>NOSQL_DB</li>
<li>MESSAGE_BUS</li>
<li>ESB_SERVER</li>
<li>LOAD_BALANCER</li>
<li>SECURITY_SERVER</li></ul> |
| @numInstances@ | The initial number of instances provisioned when this service is started. |

The following shows an example of the *General* section.
<script src="https://gist.github.com/1760251.js?file=Recipe_Prolog.groovy"></script>

h3(#mtd). Isolation SLA (Multi Tenant Deployment)

Cloudify allows deployment of several services on the same host. 
The purpose of this feature is to maximize utilization of phyiscal hosts when used as a cloud under BYON. 
There are four supported modes:
# *dedicated* (default) - The host will be dedicated to this service instance only. No other services will be deployed on this host.
# *global* - The host can be shared by all applications and tenants based on projected capacity as expressed in the Isolation SLA section
# *appShared* - Services belonging to the same application may share machines.
# *tenantShared* - Services belonging to the same authentication Group may share machines.

h4(impt). In the current version, installing services/applications on the management machines is available *only* in the global mode.

<br/>
Here's example of usage:
 
<script src="https://gist.github.com/tamirko/5261706.js"></script>

You can define one of the following in the -service.groovy file :

<script src="https://gist.github.com/4244273.js?file=isolationSLA.groovy"></script>

h4(info). If none are defined, then a dedicated isolation is used, which means that service instances may NOT share machines.

h4(impt). Please note that this feature is currently tested for the BYON Cloud Driver only.

h4(impt). Prior to using this, please read how to "set the reserved memory capacity":../clouddrivers/cloud_driver#rsv.

h2. Loading Sections from a File

Any of the sections in the service descriptor file can be described in an external file and loaded into the service descriptor file. This enables you to create sections with your preferences that can be shared between multiple services.

h4(info). Groovy variables defined in the *General* section of the service descriptor file can be used within the external file.

For example, you can create a standard layout for your "web management console":configuring_ui_section metrics, as follows:

# Describe the @userInterface@ section in an external file.
<script src="https://gist.github.com/3181845.js"> </script>
# Load the external file into your service descriptor file.
<script src="https://gist.github.com/3181854.js"> </script>