---
layout: bt_wiki
title: Puppet Integration Documentation
category: Integration
publish: true
abstract: Cloudify-Puppet integration documentation
pageord: 400
---

h2. Overview

Cloudify 2.3 (starting from milestone 1) supports the "(newwindow)Puppetlabs Puppet":http://puppetlabs.com/puppet/what-is-puppet/ platform as an additional method of conveniently deploying and configuring application services.
Puppet provides a powerful multi-platform framework for configuring operating systems and services. 
It complements Cloudify recipes by handling the scope of intra-machine configurations. 
Using Puppet, the lifecycle of services can be simplified as Puppet takes care of keeping service configurations up-to-date with current specifications as defined by manifests and classes. 
Cloudify adds extra power to Puppet installation by providing a custom Puppet Facter that uses the Cloudify attribute store to allow for inter-service dynamic configurations, which is critical for Cloud deployments.
Before you proceed, make sure you are familiar with the basic concepts of Puppet. For information, see Puppet Tutorial.
In order to use Puppet Manifests & Classes for service installation, Cloudify provides a configurable base Puppet recipe that does most of the Puppet bootstrapping work. Typically you will only need to extend this recipe and take care of the pre and post deployment phases that Puppet doesn't handle.


Sections of the page:
* "How Cloudify Uses Puppet":#how
* "Puppet Installation":#install
* "Using Puppet with Cloudify":#using
* "Running the Hello-Puppet Example":#example
* "Running Additional Manifests and Classes":#additional
* "Running Iteratively Using Custom Commands":#custom


h2(#how). How Does Cloudify Use Puppet?

The following diagrams depict the Cloudify/Puppet integration flow:
# Cloudify provisions machines and installs Cloudify agents as part of the deployment
<img src="../../images/integrations/create_virtual_machines23.jpg" width="652px">
# Cloudify executes a parameterized Cloudify Puppet recipe. This recipe installs and runs the Puppet agent.
<img src="../../images/integrations/install_puppet23.jpg" width="652px">
# The Puppet agent executes the Puppet Classifier and installs the required software.
<img src="../../images/integrations/puppet_exec23.jpg" width="660px">


h2(#install). Puppet Installation

Cloudify installs the Puppet Agent once the Puppet recipe triggers the install step of the service lifecycle, as follows.

The PuppetBootstrap.getBootstrap method is a factory method that selects the correct bootstrap strategy depending to the current operating system. The install method invoked on the factory, installs the Puppet Agent using apt-get or yum install.

h2(#using). Using Puppet with Cloudify

The next sections of this guide assume that you have Cloudify installed and that you have bootstrapped a Cloudify environment, ready to install an application. For a quick introduction to setting up a Cloudify cloud, see Cloudify's Quick Start Guide.

h3. Downloading Cloudify Puppet Recipes and Related Artifacts

To obtain the basic Puppet recipe provided by Cloudify, download the following files and save them to &lt;cloudifyRoot&gt;/recipes/services folder

You can get the base puppet recipe "here":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/puppet.

In addition, you can download the Hello Puppet application recipe and save it under &lt;cloudifyRoot&gt;/recipes/apps folder.

h2(#example). Running the Hello-Puppet Example

The Hello Puppet example is an application recipe that demonstrates how to extend the base puppet recipe to use puppet manifests and modules.
It has 2 services: 
# Tar - which demonstrates how to get a puppet manifest from a tarball and run it to create a file.
# MySQL - which installs a MySQL DB using a puppet module from a git repository.

To run the example, simply use the Cloudify install-application command. You can monitor your installation progress using the Cloudify Shell and Web UI.

h2(#additional). Running Additional Manifests and Classes

To use this integration, in a service recipe, one might use: 
<script src="https://gist.github.com/4154380.js?file=puppetservice.groovy"></script>

To run Puppet, create a &lt;service name&gt;>-service.properties file for the extending service with contents similar to the following:
<script src="https://gist.github.com/4154364.js?file=puppetRepo.groovy"></script>

These properties specify the repository where your manifests will be taken from and which classes to run with which arguments.

h3. Under the hood

This section reviews the details of the Puppet recipe and custom Facter and functions

h3. The PuppetBootstrap class

The PuppetBootstrap class is used by the base Puppet recipe to install and start the Puppet agent. In most cases you will not have to use directly, but if you do you can use the getBootsrap factory method to obtain a class instance, and then call the relevant method(s), as explained below: 
  *Class methods:*
* *install* - Installs the Puppet agent. 
* *loadManifest(String repoType, String repoUrl)* - Load a set of Puppet manifests and libraries from git, svn or a tarball. 
* *applyManifest(String manifestPath, String manifestSource)* - Apply a Puppet manifest to the node. The manifest source can be either the loaded repository, or the service directory. 
* *applyClasses(Map classes)* - Apply a hash-map of classes and their parameters to the node. 
* *puppetExecute(String puppetCode)* - Apply arbitrary puppet code to the node.

h3. Custom Puppet Features

 *Custom Facts* -  A basic integration of the Cloudify attribute store into Puppet is provided by the custom Facter script cloudify_facts which imports the global attributes and those of the current application, the current service and the current instance. The Cloudify attributes are coerced into simple string-based key-value pairs where the original key hierarchy is flattened, prefixed by the attribute type and delimited by underscores (e.g. the global attribute ["k1": ["k2": "v"]] would become "global_k1_k2" = "v"). Note that the facts are cached and not updated during the Puppet run.
 *Custom Function* -  The get_cloudify_attribute custom function fetches Cloudify attributes during recipe execution and allows interaction with other instance, services and application from within the Puppet classes. The arguments to the function are:
# *name* - name of the attribute (no default)
# *type* - global/application/service/instance (defaults to global)
# *application* - application name (defaults to current application)
# *service* - service name (defaults to service service)
# *instance_id* - instance id (defaults to current instance)

Example (the following will write the myname attribute of the hello-puppet application):
 <script src="https://gist.github.com/4155902.js?file=puppetFile.rb"></script>


Custom Type The cloudify_attribute custom type allows the user to set a Cloudify attribute of any type. The arguments are similar to those of the get_cloudify_attribute function:
# *name* - name of the attribute (no default)
# *value* - the new value (no default)
# *type* - global/application/service/instance (defaults to global)
# *application* - application name (defaults to current application)
# *service* - service name (defaults to service service)
# *instance_id* - instance id (defaults to current instance)

Example (the following will set/change the myname attribute of the hello-puppet application): 
<script src="https://gist.github.com/4155892.js?file=cloudifypuppet.rb"></script>


h2(#custom). Running Puppet Iteratively Using Cloudify's Custom Commands

<script src="https://gist.github.com/4155785.js?file=puppetCustomCmd.groovy"></script>


h3. References

"(newwindow)Glossary":http://docs.puppetlabs.com/references/glossary.html