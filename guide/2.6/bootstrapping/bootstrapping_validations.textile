---
layout: default
title: Bootstrapping Validations
category: Bootstrapping
publish: true
abstract: Explains how to configure bootstrapping validations. 
pageord: 701
---

Bootstrap validations are preliminary verifications and tests of the specified cloud configurations, performed as the first step of the bootstrapping process. The validations are aimed to alert the user in a clear and timely fashion in case of an invalid configuration to help avoid a bootstrap failure.

h2. Scope

Out-of-the-box validations are implemented for clouds that utilize the JClouds-based cloud driver (i.e. in the cloud groovy file the className is set to "org.cloudifysource.esc.driver.provisioning.jclouds.DefaultProvisioningDriver"). Some validations are currently supported for specific clouds, as detailed below. Implementing additional or custom validations for other cloud drivers are supported, as explained in the "Adding validations for a custom cloud driver":#addvalid section below.

h4(info). Validations are not performed when bootstrapping a localcloud.

The performed validations are:

|Provider or API name | All|
|Cloudify download URL | All|
|Cloud API credentials | All|
|The combination of image, hardware profile (flavor) and location |All|
|Security groups names | EC2-AWS, Openstack-Nova|
|Key-pair names |EC2-AWS, Openstack-Nova|

* All = all cloud drivers that utilize the JClouds-based provisioning driver.

h2(#skipvalid). Skip validations

Validation can take a while, depending on your configuration and connection to the cloud. If you wish to skip the validation step, use the "-skip-validation" option:
 *bootstrap-cloud -skip-validation  <cloud name>*

h2(#addvalid). Adding validations for a custom cloud driver

Implementing validations for a custom cloud driver is easy.
* If your Cloud driver extends the abstract class org.cloudifysource.esc.driver.provisioning.BaseProvisioningDriver, simply implement: void validateCloudConfiguration(ValidationContext validationContext) throws CloudProvisioningException
* If your cloud driver does not extend this class, it must implement org.cloudifysource.esc.driver.provisioning.ProvisioningDriverBootstrapValidation
in order for validations to take place.

h2. Flow

Bootstrap starts -> The Provisioning driver is instantiated -> Cloudify URLs are validated -> The provisioning driver's validateCloudConfiguration(ValidationContext) is called.
If validation is successful - The bootstrap process continues - new machines are created etc.

h2. Events

The validation process can take some time, since communication with the cloud is probably inherent. In order to improve the user experience, it is recommended to use events, which are printed out to the console, to indicate which validations are taking place. The DefaultProvisioningDriver  class is a good reference for the use of events.
As explained above, your custom cloud driver should include an implementation for this method: validateCloudConfiguration(ValidationContext validationContext)
In order to generate events, use the ValidationContext object passed to the method. It supports 3 types of events, and 3 message types, explained below.

h3. Event's timing - is the validation momentary or on-going?

* "Momentary" validations - validations that complete quickly and do not require waiting for a result. In this case use the "validationEvent" method:
** validationContext.validationEvent (ValidationMessageType, String message)	Example output: "Validating Cloudify URL"

* Ongoing events - validations that take a long time and require the user to wait for their result. In this case use 2 events - 
First, an event that informs the user an on-going validation is starting:
** validationContext.validationOngoingEvent (ValidationMessageType, message)
Example output:  Validating security group "default"
Following, use an event that informs the user of the end result, appended to the above message:
** validationContext.validationEventEnd (ValidationResultType)
The ValidationResultType can be: OK, WARNING or ERROR.
Example output: Validating security group "default" [OK]

h3. Event's type

The event's type affects the message indentation.
* "Top level" - general event messages, printed at the beginning of the line should use the ValidationMessageType:  TOP_LEVEL_VALIDATION_MESSAGE
* "Group title level" - a group of related validations can have a slightly indented message printed as a title. Use the ValidationMessageType: GROUP_VALIDATION_MESSAGE
* "Group entry level" - validations that are part of a group of validations can be printed following a "group title level" message, with a more indented message. Use the ValidationMessageType: ENTRY_VALIDATION_MESSAGE

