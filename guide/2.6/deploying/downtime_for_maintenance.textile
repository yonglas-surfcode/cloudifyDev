---
layout: bt_wiki
title: Downtime For Maintenance
category: Deploying Services & Applications
publish: false
abstract: Explains how to stop the environment for maintenance
pageord: 10
---

h2. Preface

Since every application needs to be upgraded from time to time, users need the ability to stop the environment without being forced to re-deploy their apps.
For example: Database maintenance, updating database schema etc.
Some things can be done without any downtime, but in other cases it's impossible and users must stop all or some of the components in order to upgrade the system.
This document explains how to stop your environment for maintenance and then bring it back to life without ruining anything.

Two methods are described here:
# "A Short Downtime":#short (seconds)
# "A Long Downtime":#long (minutes or even days)

<span id="short"></span>

h2. A Short Downtime of The Environment 

In a "custom command":../developing/custom_commands, you can do whatever you want, and then kill the service instance. 
Cloudify will then revive it automatically. 

h4(impt). Reviving the service will take place immediately, so if you need a two days downtime (for example), you will need to make sure that Cloudify does NOT revive your instances until you decide otherwise.

<span id="long"></span>

h2. A Long Downtime of The Environment 

Stopping the enviroment for a long time for maintenance or upgrade can be done in various ways. 
Here's an example of how to do it:

1. In the init/install/start lifecycle event handler: 
<script src="https://gist.github.com/tamirko/6853505.js"></script>

2. Do the following in the stopDetection lifecycle event handler (in the service file): 
<script src="https://gist.github.com/tamirko/6853535.js"></script>

3. In the process locator, you *MUST* use an empty list (i.e. : an empty process locator) as described "here":../developing/lifecycle_events#gist3968608.

4. Create a custom command that does *all* the following steps :
<script src="https://gist.github.com/tamirko/6853595.js"></script>

h4(impt). These steps can be separated into several custom command, thus you can invoke each one of them independently.
