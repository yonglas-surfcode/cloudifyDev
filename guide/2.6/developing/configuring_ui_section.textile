---
layout: default
title: Configuring the Web Management Console
category: Developing Recipes
publish: true
abstract: Explains how to configure the web management console to present the information generated by probe and monitoring plugins
pageord: 11
---

The Cloudify web management console provides a web-based gui for monitoring your applications and their corresponding services. In particular, in the *Applications* view, the *Metrics* pane displays a group of widgets that show metrics for the selected service using line-bar charts and balance gauges. Each widget displays a default metric but has a drop-down menu for selecting other metrics. The layout of the *Metrics* pane and the metric groups and widgets for the drop-down menu, can be configured for each service in its descriptor file.

h2. Built-In and Custom Metrics

By default, Cloudify monitors generic metrics such as CPU usage and memory utilization. But it can also monitor any other, more specific, metrics using one of the following custom mechanisms:
* "Monitoring Probes":../plugins_and_probes/probes--Groovy closures that emit metrics and their current value.
* "Monitoring Plugins":../plugins_and_probes/develop_your_plugin--Java classes that emit metrics and their current value.

Cloudify invokes the probe or plugin every 5 seconds, and expects to receive a *Map* that contains the names of the metrics as keys and their respective values. Both the built-in and custom metrics can be displayed in the web management console.

h2. Configuring the Metrics Pane

In the web management console, the *Applications* view contains a dedicated pane that is used to display the monitored metrics, and allows you to choose between the metrics using a dedicated drop-down combo box (metric menu). The metric menus are divided into logical groups of metrics (metric groups). The recipe enables you to configure these groups in the service descriptor file and determine which built-in and custom metrics belong in each metric group. Default metrics are displayed in  widgets, the layout of which is described in the *widgetsGroup* section.

The following example shows the *userInterface* section for the PetClinic's Mongo database service. The *metricGroups* section describes the *MongoDB* metric group that contains 6 metric. The *widgetGroups* describes 6 default metrics to display and the layout for each widget.

h4(info). It is not necessary to define a widget per metric as you can change the displayed metric using the metric menu.

<script src="https://gist.github.com/1766801.js?file=ui_config.groovy"></script>

The following shows the manifestation of the example, the former showing the *Metrics* pane, and the latter showing the metric menu.

!../../images/recipes/appmap.png!

!../../images/recipes/widgets.png!

h2. Built-In Recipes as an Example

The best way to start with metrics configuraiton is to look at one of the built-in examples, e.g. the PetClinic recipe under @<cloudifyRoot>/examples/petclinic. The tomcat recipe (@<cloudifyRoot>/examples/petclinic/tomcat/tomcat-service.groovy) uses a the JMX plugin, whereas the MongoDB recipes (@<cloudifyRoot>/examples/petclinic/mongod) usea a "custom plugin":../plugins_and_probes/develop_your_plugin that connects to MongoDB using its Java API and fetches metrics using specific MongoDB API commands.