---
layout: default
title: Custom Commands
category: Developing Recipes
publish: true
abstract: Describes the custom commands mechanism and usage
pageord: 9
---

When a custom command is invoked using the Cloudify shell, it runs the corresponding custom command handler described in the service descriptor file.

h2. Why use Custom Commands?

In many scenarios, you may want to have greater control over your application service than is provided by the built-in "lifecycle events":../developing/lifecycle_events. For example, you may want to implement various application-level concerns, such as hot upgrades (e.g. replacing a @.war@ file, and then refreshing the web container), database schema updates, and more.

Cloudify provides this mechanism by allowing you to describe *Custom Commands* using Groovy closures, external Groovy scripts, or external shell/batch scripts. The commands can be parameterized, and are invoked using the Cloudify shell. 

h2. Describing a Custom Command

Custom commands are described in @customCommands@ sections of your service descriptor file. Each @customCommands@ section can contain one or more commands defined as an array.

The following example shows the @customCommands@ sections for allocating an external Groovy script, shell script, and batch script.
<script src="https://gist.github.com/1723535.js?file=custom1.groovy"></script>

The following example describes the @customCommands@ section for a command using a Groovy closure that has two parameters.
<script src="https://gist.github.com/1723545.js?file=customCommands2.groovy"></script>
		
h4(warn). When using user-defined Java libraries in your Groovy closures or scripts, make sure you add the relevant @import@ statement, and place the corresponding @jar@ files in the @usmlib@ folder of the service.

h4(warn). Any external script invoked by the custom command must be copied to the service folder.

The @customCommands@ section must be located in the "@General@":../developing/service_recipe section of the relevant service descriptor file (@<service name>-service.groovy@). The following example shows the @customCommands@ section after the @lifecycle@ section, in the @General@ section of the service descriptor file.
<script src="https://gist.github.com/2267558.js?file=tomcat.groovy"></script>

h2. Invoking Custom Commands

During the "deployment":../deploying/deploying_apps of your application, the custom commands that you specified in the recipe are registered. Once your application is up and running, you can invoke custom commands at any time from the Cloudify shell.
	
To invoke a custom command that does have parameters, at the Cloudify shell prompt, type: *@invoke@* @ServiceName customCommandName@

To invoke a custom command that has two parameters, at the Cloudify shell prompt, type: *@invoke@* @ServiceName customCommandName x y@

For example, let's consider the following scenario:
* You used Cloudify to on-boarded your application, which includes a Tomcat service, to a cloud.
* After the installation, you fixed a bug in your web application.
* You want to update the @.war@ file without taking down the Tomcat service, or its host VM. In other words, you want to avoid redeploying the entire application.

h3. To implement the update, you can perform the following tasks

* Describe the following *updateWar* custom command in the @customCommands@ section of the tomcat service descriptor file, *BEFORE* you deploy your application.
  <script src="https://gist.github.com/1723735.js?file=update_warcc.groovy"></script>
* Add the following @update_war.groovy@ script to the Tomcat service folder.
  <script src="https://gist.github.com/1723340.js?file=update_war.groovy"></script>
* At the Cloudify shell, invoke the @updateWar@, as follows:
** Type: *@connect@* @REST-ADMIN-SERVER-URL@ (to connect to the management machine)
** Type: *@use-application@* @YOUR-APP-NAME@ (to set the current application context)
** Type:  *@invoke@* @tomcat updateWar@

Once the command finishes, the new @war@ file should be deployed.