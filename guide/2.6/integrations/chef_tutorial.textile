---
layout: default
title: Chef Tutorial
category: Integration
publish: true
abstract: Chef Tutorial
pageord: 300
---

This document is a walk-through of how to use the Cloudify-Chef integration in order to install any Chef cookbook via a Cloudify recipe.

h2. The anatomy of an Application Recipe

The following diagram depicts the folder structure of a "regular" application's recipe.
(Regular means : a recipe that doesn't use Chef):
!../../images/recipes/recipe_folder2_3.png!
The folder structure of an application recipe that uses the Cloudify-Chef integration recipe is similar, but it also contains a cookbooks folder (named *cookbooks*) and (if required) a roles folder (named *roles*).
The cookbooks folder and the roles folder (again *only* if required) must reside in the application folder level, as the Chef server expects them to be there and uploads these two folders in its postStart lifecycle event handler.

In this guide, we'll use the "(newwindow)travel-chef":https://github.com/CloudifySource/cloudify-recipes/tree/master/apps/travel-chef recipe that comes with the Cloudify "(newwindow)distribution zip file":../../downloads/get_cloudify.

h2. The Travel-Chef Application Structure

<h4 class="info">The Travel-Chef application recipe is comprised of four services: <ul>
<li>Three of these services (*chef-server*,*mysql* and *app*) extend the "(newwindow)base chef recipe":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef.</li>
<li>One service (*apacheLB*) is a "standalone" recipe and it does not extend the Chef recipe.</li><ul>
</h4>
So, obviously, we'll focus on the services that use Chef and the apacheLB recipe will NOT be dealt with in this document.

h2. The Steps

h3. 1. Cookbooks and Roles  

Place all your cookbooks inside a folder named cookbooks in the root folder of your application recipe (it's the same folder where the travel-application.groovy file is located).
Do the same with all the roles, if your application requires it (i.e.: place them in a folder named "roles" in the application's root folder).

h3. 2. Define the Application

Create an application file that describes your application's services and their dependencies.
Here's the travel-application.groovy : 
<script src="https://gist.github.com/tamirko/6130792.js"></script>

h3. 3. The Chef-Server recipe

h4. 3.1 Define Inheritence 

Make sure that your Chef-Server recipe inherits (extends) the base Cloudify Chef-Server recipe which inherits the base Cloudify Chef recipe.

<script src="https://gist.github.com/tamirko/6130879.js"></script>

h4. 3.2 Specify Cookbooks and Roles Repository

The following git repository will be used by the Chef Server to upload the cookbooks and roles
(This needs to be specified in chef-server-service.properties): 
<script src="https://gist.github.com/tamirko/6120928.js"></script>

h4. 3.3 Chef Server Version

Specify the Chef Server version to be used by the recipe in chef-server-service.properties:
e.g :   <span class="snippet">chefServerVersion="11.0.8-1"</span>

h4. 3.4 Additional Stuff

If the Chef-Server recipe needs to add any additional implementations, such as monitors, scaling rules, etc, the place to put them is right after the "extend" statement in the Chef-Server service file (chef-server-service.groovy).

* Any other "stuff"(e.g.: libs, groovy files, images etc.) that the Chef-Server recipe needs, must reside in the Chef-Server recipe folder.
* If you want to override the Berksfile that the base Chef-Server recipe uses, you need to place your Berksfile in the Chef-Server recipe folder (where the chef-server-service.groovy is located) and NOT in the cookbooks folder of the application.

h2. 4 The MySQL Recipe

h4. 4.1 Define Inheritence for the MySQL Recipe

Make sure that the MySQL service inherits (extends) the Mysql-Vanilla recipe which inherits the base Cloudify Chef recipe.
Here's how it's done in the mysql-service.groovy :
<script src="https://gist.github.com/tamirko/6130942.js"></script>

h4. 4.2 Run List

Define the run list and other properties which are required by the MySQL recipe in mysql-service.properties:
<script src="https://gist.github.com/tamirko/6131025.js"></script>
 
h4. 4.3 Additional stuff

If the MySQL recipe needs to add any additional implementations, such as monitors, scaling rules, etc, the place to put them is right after the "extend" statement in the MySQL service file (mysql-service.groovy). 
 
Except for cookbooks which are expected to be in the application folder, any other "stuff" (e.g.: libs, groovy files, images etc.) that the MySQL recipe needs, must reside in the MySQL recipe folder.
 
h2. 5 The App Recipe

h4. 5.1 Define Inheritence for the App Recipe

Make sure that the app service, inherits (extends) the base Cloudify Chef recipe.
Here's how it's done in the app-service.groovy :
<script src="https://gist.github.com/tamirko/6131054.js"></script>

h4. 5.2 Run List

Define the run list and other properties which are required by the app recipe in app-service.properties:
<script src="https://gist.github.com/tamirko/6131070.js"></script>
 
h4. 5.3 Additional Stuff

If the app recipe needs to add any additional implementations, such as monitors, scaling rules, etc, the place to put them is right after the "extend" statement in the app service file (app-service.groovy). 
Click here to view the "(newwindow)app-service.groovy":https://github.com/CloudifySource/cloudify-recipes/blob/master/apps/travel-chef/app/app-service.groovy

Except for cookbooks which are expected to be in the application folder, any other "stuff" (e.g.: libs, groovy files, images etc.) that the app recipe needs, must reside in the app recipe folder.

*That's it !!!*
Now you are ready to install your Chef cookbooks via a Cloudify application recipe.



