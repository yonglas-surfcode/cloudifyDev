---
layout: bt_wiki
title: Cloudify-Chef Lifecycle Event Handlers
category: Integration
publish: true
abstract: Cloudify-Chef Lifecycle Event Handlers
pageord: 250
---
h2. &nbsp;

<h4 class="impt">This document assumes that : <ol><li>You are familiar with the basic concepts of Chef. For information, see "(newwindow)Chef Basics":http://wiki.opscode.com/display/chef/Chef+Basics.</li> <li>You have Cloudify installed and that you have "bootstrapped a Cloudify environment":../bootstrapping/bootstrapping_process, ready to install an application.</li></ol></h4>

Sections of the page:
* "The base Cloudify-Chef recipe":#base
* "Chef Installation":#install
* "Chef-server service start":#serverstart
* "Chef-server service post start":#serverps
* "Chef service start":#start
* "Accessing the attribute store from a recipe":#ca



h2(#base). The base Cloudify-Chef recipe

* The base Cloudify-Chef recipe is located in "(newwindow)https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef
* The Cloudify-Chef-Server recipe is located in "(newwindow)https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-server":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-server

h4(info). The chef-server recipe extends the base chef recipe.

<br/>
In general, every Cloudify service that uses Chef, must extend the base chef recipe.
In the following example, you can see how to specify such inheritence in a serivce file (in this case, of a mysql recipe):
<script src="https://gist.github.com/tamirko/6112422.js"></script>


h2(#install). Chef Installation

Cloudify installs the chef client once the chef recipe triggers the install step of the service lifecycle, as follows.
<script src="https://gist.github.com/3656778.js"> </script>

The @ChefBootstrap.getBootstrap@ method is a factory method pattern that selects the correct bootstrap strategy depending on the current operating system. The @install@ method invoked on the factory, installs the Chef client using @gem@ or @yum@ install.


h2(#serverstart). Chef-server service start

In its start lifecycle event handler, the chef-server service runs chef solo.
<script src="https://gist.github.com/tamirko/6120838.js"></script>

In the end of its start, the chef-server also write its URL in the Cloudify attributes store as shown here: 
 &nbsp;&nbsp;&nbsp;<span class="snippet">context.attributes.global["chef_server_url"] = serverUrl</span>
 
h2(#serverps). Chef-server service post start

In the chef-server-service.properties file of any service that extends the chef-server service, you can specify the location of the cookbooks to be used by the chef server and by its clients (chef nodes).
These cookbooks will be uploaded to the chef server in its postStart lifecycle event handler.
Here's an example of the travel-chef application recipe that we will go over in this document :
<script src="https://gist.github.com/tamirko/6120928.js"></script>

h2(#start). Chef service start

In its start lifecycle event handler, each service (except for the "chef-server":#serverstart service), runs the runClient (of the bootstrap) 

<script src="https://gist.github.com/tamirko/6121235.js"></script>

h4(info). In order to run chef solo (i.e.: without a chef-server) a service must specify/implement it, in its start lifecyle event handler (see the "chef-server":#serverstart service).

In the service properties file (<serviceName>-service.properties), you can specify a property called *runParams*. 
For example, you can assign a groovy structure that gives an array of the Chef recipes to use, the name of the cookbook, and the default attributes.

<script src="https://gist.github.com/3656114.js"> </script>

h2(#ca). Accessing the Cloudify attribute store from a Cloudify-Chef recipe

If you need to set the value of an attribute in the Cloudify attribute store from within a chef recipe, you need to do the following:

# Include the "(newwindow)cloudify":https://github.com/fewbytes-cookbooks/cloudify cookbook in your recipe, either in a berkshelf file or by placing its code in a repository which is accessible to your chef-server.
(The cookbook will be moved to the Cloudify GitHub repository soon)
# Implement code statements that use cloudify_attribute which is defined in the cloudify cookbook.

Here's an example of such usage from the "(newwindow)chef-mysql recipe":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-mysql (in recipes/server.rb) :
<script src="https://gist.github.com/tamirko/6121860.js"></script>

After this is invoked, it can be accessed by any service instance in the application in the following manner : 
&nbsp;&nbsp;&nbsp;<span class="snippet">mysqlInstanceAddress = context.attributes.thisApplication["mysql_address"]</span>


