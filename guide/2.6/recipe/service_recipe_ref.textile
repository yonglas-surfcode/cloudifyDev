---
layout: bt_wiki
title: Service Descriptor Reference
category: Reference
publish: true
abstract: A reference with all the elements of the service descriptor
pageord: 200
---

h2. Hover over keywords to get more information

<script type="text/javascript">
var messages = {
    import:'The standard Groovy command for importing classes',
    service:'The service root element::required',
    service_name:'The service name::required',
    icon:'The image file to use as an icon for the service in the web management console',
    type:'The service tier type to use in the web manangement console, possible values: WEB_SERVER, APP_SERVER, DATABASE, NOSQL_DB, MESSAGE_BUS, ESB_SERVER, SECURITY_SERVER',
    numInstances:'The initial number of instances provisioned when this service is started::required',
    elastic:'A global flag that enables changing the number of instances for this service',
    minAllowedInstances:'The minimum number of service instances. Used together with scaling rules',
    maxAllowedInstances:'The maximum number of service instances. Used together with scaling rules',
    scaleCooldownInSeconds:'The time (in seconds) that scaling rules are disabled after scale in or out',
    samplingPeriodInSeconds:'The time (in seconds) between two consecutive metric samples. Used together with scaling rules',
    url:'The URL to display in the web management console, for example, a link to your application',
    retries:'Enables users to set the number of times a service instance will be installed until it is considered failed. The default value of "retries" is -1, which indicates there is no limit on retries (retry forever). Set this field to 0 to set a recipe to not retry installation after a failure, set it to 1 to retry once, etc. A service instance that has reached the limit of its retried will be set to the "ERROR" state (similar to the disableSelfHealing flag). Note that the disable self-healing flag overrides the retry limit and will prevent any retries, regardless of the retries field.',
    compute:'A block specifying the compute resources to use for this service',
    template:'An attribute specifying a template name in the Cloud Driver configuration file',
    lifecycle:'A block specifying the handlers for the different lifecycle events',
    preServiceStart:'Triggered just before service instances are provisioned',
    init:'Triggered just before installaion starts; use this to initialize the installation process',
    preInstall:'Triggered before the installation starts; e.g. use this to get the service binaries',
    install:'Triggered when installation is ready to commence; e.g. use this to unzip the binaries',
    postInstall:'Triggered after the installation completes; e.g.e use this to tweak configuration files',
    preStart:'Triggered before the service starts; e.g. use this to verify the installation files and folder structure',
    start:'Triggered when the service is ready to be started; e.g. use this run the command that starts the service',
    startDetection:'Triggered after the service is started; e.g. use this to check the service\'s ports are live thus verifying that the service is running',
    locator:'Triggered after the service is detected; use this to override the default list of process ids',
    postStart:'Triggered after the service is started; e.g. use this to register service instances with a load balancer',
    preStop:'Triggered before the service is stopped',
    stop:'Triggered when the service is ready to be stopped',
    postStop:'Triggered after the service is stopped',
    shutdown:'Triggered when the service is ready to be uninstalled; e.g. use this to delete shared files',
    preServiceStop:'Triggered after the last service instance is unprovisioned but just before the cluster is shut down',
    details:'A block describing Scripted probes for monitoring configuration',
    monitors:'A block describing Scripted probes for monitoring performance',
    customCommands:'A block describing custom commands that can be run using the Cloudify shell',
    customProperties:'Describes a list of properties that can be used by developers in plugins',
    scalingRules:'A block describing the set of scaling rules',
    scalingRule:'A block describing a specific rule for deciding when to scale in/out',
    serviceStatistics:'The name of the metric that is the basis for the scale rule decision',
    metric:'The name of the metric that is the basis for the scaling rule decision',
    movingTimeRangeInSeconds:'The sliding time range (in seconds) for aggregating per-instance metric samples',
    statistics:'The algorithms for aggregating metric samples by instances and by time',
    highThreshold:'The value above which the number of instances is increased',
    highThreshold_value:'The threshold value above which the number of instances is scaled',
    instancesIncrease:'The number of instances to increase when above threshold',
    lowThreshold:'The value below which the number of instances is decreased',
	lowThreshold_value:'The threshold value below which the number of instances is scaled',
    instancesDecrease:'The number of instances to decrease when below threshold',
    plugins:'A list of monitoring plugins to be invoked by this recipe',
    plugin:' A plugin descriptor block, contains the plugin class and configuration',
    plugin_name:'An alias for this plugin',
    className:'The class to load for this plugin. must be found in the the Cloudify agent classpath. Custom plugins should be under usmlib folder',
    config:'The keys for configuring the plugin',
    userInterface:'The custom metric configuration in the management GUI',
    metricGroups:'A block describing groups of custom metrics as sub menus in the GUI',
    metricGroup:'A group of custom metrics as sub menu in the GUI',
    metricGroup_name:'The name of the metric group',
    metrics:'An array of metrics included in the group',
    widgetGroups:'A block describing metrics mappings to widgets in GUI',
    widgetGroup:'A group of Widgets presenting a custom metric',
    widgetGroup_name:'The name of the group',
    widgets:'The widgets used in the group',
    balanceGauge:'A gauge showing the relative SD in the cluster',
    barLineChart:'A complex chart showing bars for min-max range in the cluster and a line for cluster AVG',
    axisYUnit:'The unit for the Y axis of a metric bar-line chart, possible values: Unit.REGULAR, Unit.PERCENTAGE, Unit.MEMORY, Unit.DURATION'
}
</script> 

 
<pre class='prettyprint'>
import framework.utils.usm.StringWrapper
import Helper

service {
    name "mongod"
    icon "mongodb.png"
    type "NOSQL_DB"
    numInstances 2
    elastic true
    minAllowedInstances 1
    maxAllowedInstances 2
    scaleCooldownInSeconds 20
    samplingPeriodInSeconds 1
    url "http://" + InetAddress.localHost.hostName + ":7777"	
    retries 1
	
    compute {
        template "SMALL_LINUX_32"
    }

    lifecycle {
        preServiceStart "mongod_preServiceStart.groovy"
        init "mongod_init.groovy"
        preInstall "mongod_preInstall.groovy"
        install "mongod_install.groovy"
        postInstall "mongod_postInstall.groovy"
        preStart "mongod_preStart.groovy"
        start "mongod_start.groovy"
        startDetectionTimeoutSecs 60
        startDetection {
            ServiceUtils.isPortOccupied(context.attributes.thisInstance["port"])
        }
        locator "mongod_locator.groovy"
        postStart "mongod_postStart.groovy"
        preStop "mongod_preStop.groovy"
        stop "mongod_stop.groovy"
        postStop "mongod_postStop.groovy"
        shutdown "mongod_shutdown.groovy"
        preServiceStop "mongod_preServiceStop.groovy"

        details{
           builder = new JmxBuilder()
           key = "Bind Address"
           beanName = "jboss.system:type=ServerConfig"
           attribute = "BindAddress"
           RMIConnector client = builder.clientConnector( port: 1099)
           client.connect()
           connection = client.getMBeanServerConnection();
           value = connection.getAttribute(beanName, attribute);
           client.close()
           return [key:value]
        }
        
        monitors{
            try { 
                port  = context.attributes.thisInstance["port"] as int
                mongo = new Mongo("127.0.0.1", port)            
                db = mongo.getDB("mydb")
                                                        
                result = db.command("serverStatus")
                println "mongod-service.groovy: result is ${result}"    
                                                        
                return [
                    "Active Read Clients":result.globalLock.activeClients.readers,
                    "Active Write Clients":result.globalLock.activeClients.writers, 
                    "Read Clients Waiting":result.globalLock.currentQueue.readers, 
                    "Write Clients Waiting":result.globalLock.currentQueue.writers, 
                    "Current Active Connections":result.connections.current,
                    "Open Cursors":result.cursors.totalOpen
                ]
            }            
            finally {
                if (null!=mongo) mongo.close()
            }
        }        
    }

    customCommands ([
        "updateWar" : "update_war.groovy"
    ])
    
    customProperties ([
        "TailerInterval": "1"
    ])

    scalingRules ([
      scalingRule {
        serviceStatistics {
            metric "Total Requests Count"
            movingTimeRangeInSeconds 20
            statistics Statistics.maximumThroughput
        }

        highThreshold {
            value 1
            instancesIncrease 1
        }

        lowThreshold {
            value 0.2
            instancesDecrease 1
        }
      }
    ])    
    
    plugins([     
        plugin {
            name "MongoDBMonitorsPlugin"
            className "org.cloudifysource.mongodb.MongoDBMonitorsPlugin"
            config([                
                   "host":"127.0.0.1",                
                   "dbName":"petclinic",
                   "dataSpec" : [
                        "Active Read Clients":"globalLock.activeClients.readers", 
                        "Active Write Clients":"globalLock.activeClients.writers", 
                        "Read Clients Waiting":"globalLock.currentQueue.readers", 
                        "Write Clients Waiting":"globalLock.currentQueue.writers", 
                        "Current Active Connections":"connections.current",
                        "Open Cursors":"cursors.totalOpen"
                    ]
            ])
        }        
    ])
   userInterface {
        metricGroups = ([
            metricGroup {
                name "MongoDB"
                metrics([
                    "Open Cursors", 
                    "Current Active Connections",
                    "Active Read Clients",
                    "Active Write Clients",
                    "Read Clients Waiting",
                    "Write Clients Waiting"                    
                ])
            }
        ])

        widgetGroups = ([
            widgetGroup {
                name "Open Cursors"
                widgets ([
                    balanceGauge{metric = "Open Cursors"},
                    barLineChart{
                        metric "Open Cursors"
                        axisYUnit Unit.REGULAR
                    },
                ])
            }, 
            widgetGroup {
                name "Current Active Connections"
                widgets ([
                    balanceGauge{metric = "Current Active Connections"},
                    barLineChart{
                        metric "Current Active Connections"
                        axisYUnit Unit.REGULAR
                    },
                ])
            },             
            widgetGroup {
                name "Active Read Clients"
                widgets ([
                    balanceGauge{metric = "Active Read Clients"},
                    barLineChart{
                        metric "Active Read Clients"
                        axisYUnit Unit.REGULAR
                    },
                ])
            }, 
            widgetGroup {
                name "Active Write Clients"
                widgets ([
                    balanceGauge{metric = "Active Write Clients"},
                    barLineChart{
                        metric "Active Write Clients"
                        axisYUnit Unit.REGULAR
                    },
                ])
            }, 
            widgetGroup {
                name "Read Clients Waiting"
                widgets ([
                    balanceGauge{metric = "Read Clients Waiting"},
                    barLineChart{
                        metric "Read Clients Waiting"
                        axisYUnit Unit.REGULAR
                    },
                ])
            }, 
            widgetGroup {
                name "Write Clients Waiting"
                widgets ([
                    balanceGauge{metric = "Write Clients Waiting"},
                    barLineChart{
                        metric "Write Clients Waiting"
                        axisYUnit Unit.REGULAR
                    },
                ])
            }    
        ])
    }  
}
</pre>
<script>
prettyPrint();
</script>  
 