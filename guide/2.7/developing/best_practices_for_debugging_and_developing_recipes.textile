---
layout: default
title: Best Practices for Developing and Debugging Recipes 
category: Developing Recipes
publish: true
abstract: Describes the best practices for debugging Cloudify.
pageord: 14
---

h2. Preface 

h4(info). There are several techniques to debug Cloudify recipes and this document covers some of them.
Each of the following techniques may be useful and/or feasible for you in some scenarios, but irrelevant in other scenarios.

h2. Local-Cloud

If possible, develop your recipes using the Cloudify "localcloud":http://www.cloudifysource.org/guide/bootstrapping/bootstrapping_localcloud.
Run it on an OS that is as close as possible to the one you intend to use in production. 
If you can, use the same VM image as your cloud uses.

h2. Tail The Log Files

There are two ways to use the *tail -f* : 
# Invoke the following command in the logs folder on any of deployed service instances VMs. -Obviously, you need to ssh to that VM first... :
  <pre class='prettyprint'>.../logs$ tail -f *.log</pre>
# Use the Cloudify CLI *tail* command as described "here":http://www.cloudifysource.org/guide/recipe/command_line_reference#tail. - This will enable you to retrieve the last N lines of a specific service log.

h2. Shell Scripts

Prepare shell scripts and run them independently on the deployed VMs. Thus you will be able to get more information on the current status.
Again, you need to ssh to that VM first.

h2. Scripts as Lifecycle Event handlers 

Defining event handlers as closures can be convenient, especially if the code to execute is short, but they can make debugging recipes difficult.
Replacing closures with scripts allows you to edit the script file on the VM, so the updated code will be executed the next time the event is fired. 
<!-- This becomes even more relevant when the Recipe Debugger is used. -->


For example:

h3. A Closure Lifecycle Event Handler

<script src="https://gist.github.com/tamirko/6792118.js"></script>

h3. A script as a Lifecycle Event Handler

<script src="https://gist.github.com/tamirko/6792187.js"></script>

In this case, you can copy the myservice_postStart.groovy to any of the VMs on which "myservice" is deployed and the next time postStart event will be fired for this service, your new code will run.
If you work with a closure, this cannot be done, since a closure life cycle event handler is parsed only once, during the installation and can never be changed.

h4(info). Here's a little power-user tip: When a recipe is installed, it is first copied to the management machine, into CLOUDIFY_HOME/deploy/&lt;Application Name&gt;.&lt;Service Name&gt; 
Every time a service instance is started, its files are copied from there. So if you need to make some quick changes to debug a recipe issue, log-in to the management machine and edit the files in the deploy directory. Next time a service instance starts (either due to self-healing or scale-out), it will use the new code. You should never do this in production, but for debugging purposes it is a real time-saver.

h4(impt). If you use management persistence in your Cloudify manager, the deploy folder will be placed in the persistence folder instead of under CLOUDIFY_HOME


h2. Vagrant

Work with "(newwindow)Vagrant":http://downloads.vagrantup.com and you will be able to use its cool features for debugging.
With Vagrant you can reset your environment whenever you want and can even restore the environment by using snapshots or "milestones" in your installation.

In order to use the snapshot feature(plugin), you need to do the following : 
<script src="https://gist.github.com/tamirko/6792351.js"></script>


h2. Disable Self Healing

Cloudify's self-healing feature restarts a failed service instance automatically. This can make debugging recipe issues problematic, so we reccomend that you use the "disable-self-healing":http://www.cloudifysource.org/guide/deploying/deploying_srvs#dsbl flag to prevent Cloudify from restarting a failed service instance.
When this flag is used, the failed service instance stops when a lifecycle event fails and you are able to take a closer look at what is going on.

h2. Use prinouts 

Another old "trick" that always helps, is adding printouts to your code and look for them in the log files in case you got errors or failures.



