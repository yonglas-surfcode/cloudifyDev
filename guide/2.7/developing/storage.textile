---
layout: bt_wiki
title: The Storage API
category: Developing Recipes
publish: true
abstract: Explains how to use the Cloudify's storage API. 
pageord: 12
---

In addition to provisioning VMs using the Cloud driver, users can create, attach, detach or re-attach to a device from a recipe by using the storage API. 
The storage API enables users to implement data persistency in a portable manner across clouds, so that in addition to deployment, users can also provide failover capabilities and support restart scenarios in their applications.

There are two methods of using the Storage API:
# "Static storage allocation":#st
# "Dynamic storage allocation":#dy

h2(#st). Static Storage Allocation

Static storage allocation abstraction gives the ability to automatically create and mount an external storage volume to a service instance upon machine provisioning. This will ensure no loss of data as a result of failures in any single component. 

h3. Restrictions:

* For *nix instance types, some custom or newer kernels might have restrictions that limit use to /dev/sd[f-p] or /dev/sd[f-p][1-6]. If you have trouble using /dev/sd[q-z] or /dev/sd[q-z][1-6], try switching to /dev/sd[f-p] or /dev/sd[f-p][1-6].
* Static storage is not supported when using multi-tenancy. See "Dynamic storage allocation":#dy.

h3. Attaching an External Storage Volume

* Storage volumes behave like raw, unformatted block devices. 
* Cloudify allows you to automatically create, attach, format and mount a new storage volume to a service's server instance upon machine provisioning, having predetermined size and file-system type
* In case of a machine failure, the storage volume will be detached from the machine and all data will remain on the external storage device. This is crucial in maintaining persistent, stateful services and for preventing loss of data caused by failures of any single component.
  
h3. Steps for Configuring a Static Storage Volume

In the cloud driver file (-cloud.groovy):
# Define a new storage template inside the cloudStorage block having the following flags and parameters. 
This defines a storage template in the cloud groovy holding all the necessary properties for the required block such as fs type, mount path and volume size in GB:
<script src="https://gist.github.com/tamirko/5301386.js"></script>
# Add the appropriate storage driver class name to the cloud configuration block:
<script src="https://gist.github.com/tamirko/5301407.js"></script>
# In a service recipe, specify the storage template to be used for that specific service.
This will cause the block storage to be created and mounted upon the machine provisioning of that specific service:
<script src="https://gist.github.com/tamirko/5301451.js"></script>

h4(impt). Cloudify currently supports the ec2 EBS running on linux machines and also holds an example of an "Openstack IaaS" storage driver implementation. 

h2(#dy). Dynamic storage allocation

An interesting use case for using a Cloud Block Storage is the ability of service recipes to dynamically allocate and attach volume drives at runtime. A service can use an Abstraction Layer provided by Cloudify to allocate block storage during its lifecycle events, or even after they finish.
This feature exposes services to an agnostic Cloud Block Storage API at runtime: createVolume,attachVolume,detachVolume,deleteVolume,format,mount,unmount.

A service can only perform operations on itself, but by invoking a custom command, users can perform it on any service instance of any service (in the same application).

Use the service context for accessing the storage API (context.storage) as shown in the following example:
<script src="https://gist.github.com/tamirko/5301677.js"></script>


h3. Storage device names on Ubuntu Images

* Ubuntu 11.04 introduced a kernel change, causing all XEN based storage devices to have a name in the form of "/dev/xvXX". This means that the device name specified upon attachment will not be the actual device name on the OS.
* For example, if you attach a device called "/dev/sdc", it will actually appear as "/dev/xvdc". This means that if you want storage devices to be mounted on an Ubuntu box, you will have to specify it in the form above.
* This device name specification will also work on other Linux distributions, so to create a generic storage template that fits both OS verions, use the Ubuntu version.


h2. How it Works

Click "here":how_storage_works to read how the storage API works.




