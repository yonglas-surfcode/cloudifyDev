---
layout: blogpost
title: AWS Outage - Moving from Multi-Availability-Zone to Multi-Cloud
image: dotan.jpg
author: Dotan Horovits
tags: 
 - AWS
 - Multi Cloud
 - Cloud Deployment
 - Disaster Recovery
---

<p>A couple of days ago Amazon Web Services (AWS) suffered a significant outage in their US-EAST-1 region. This has been the 5th major outage in that region in the past 18 months. The outage <a href="http://www.datacenterknowledge.com/archives/2012/10/22/amazon-cloud-outage-affecting-many-sites/">affected leading services</a> such as Reddit, Netflix, Foursquare and Heroku. How should you architect your cloud-hosted system to sustain such outages? Much has been written on this question during this outage, as well as past outages. Many recommend basing your architecture on multiple AWS Availability Zones (AZ) to spread the risk. But during this outage we saw even multi-Availability Zone applications severely affected. Even Amazon published during the outage that</p><blockquote>Customers can launch replacement instances in the unaffected availability zones but may experience elevated launch latencies or receive ResourceLimitExceeded errors on their API calls, which are being issued to manage load on the system during recovery.</blockquote>
<p>The reason is that there is an underlying infrastructure that escalates the traffic from the affected AZ to other AZ in a way that overwhelms the system. In the case of this outage it was the AWS API Platform that was rendered unavailable, as nicely explained in this <a href="http://www.systemswatch.com/blog/2012/10/amazon-web-services-outages-even-in-multi-az/">great post</a>:</p>
@The waterfall effect seems to happen, where the AWS API stack gets overwhelmed to the point of being useless for any management task in the region.@
<p>But it doesn&#39;t really matter for us as users which exact infrastructure it was that failed on this specific outage. 18 months ago, during the first major outage, the reason was another infastructure component, the Elastic Block Store (&ldquo;EBS&rdquo;) volumes, that cascaded the problem. Back then I wrote a post on <a href="http://horovits.wordpress.com/2011/05/16/retrospect-on-recent-aws-outage-and-resilient-cloud-based-architecture/" title="Retrospect on recent AWS Outage and Resilient Cloud-Based Architecture">how to architect your system to sustain such outages</a>, and one of my recommendations was:</p>
@Spread across several public cloud vendors and/or private cloud@
<p>The rule of thumb in IT is that there will <strong>always</strong> be extreme and rare situations (and don&#39;t forget, Amazon only commits to 99.995% SLA) causing such major outages. And there will <strong>always</strong> be some common infrastructure that under that extreme and rare situation will carry the ripple effect of the outage to other Availability Zones in the region. Of course, you can mitigate risk by spreading your system across several AWS Regions (e.g. between US-EAST and US-WEST), as they have much looser coupling, but as I stated on my <a href="http://horovits.wordpress.com/2011/05/16/retrospect-on-recent-aws-outage-and-resilient-cloud-based-architecture/">previous post</a>, that loose coupling comes with a price: it is up to your application to replicate data, using a separate set of APIs for each region. As Amazon themselves state: &quot;it requires effort on the part of application builders to take advantage of this isolation&quot;. The most resilient architecture would therefore be to mitigate risk by <strong>spreading your system across different cloud vendors</strong>, to provide the best isolation level. The advantages in terms resilience are clear. But how can that be implemented, given that the vendors are so different in their characteristics and APIs? There are 2 approaches to deploying across multiple cloud vendors and keeping cloud-vendor-agnostic:</p>
<ol>
                <li><strong>Open Standards and APIs</strong> for cloud API that will be supported by multiple cloud vendors. That way you write your application using a common standard and have immediate support by all conforming cloud vendors. Examples for such emerging standards are <a href="http://www.openstack.org/" target="_blank">OpenStack </a>and <a href="http://www.jclouds.org/" target="_blank">JClouds</a>. However, the Cloud is still a young domain with <a href="http://www.infoworld.com/d/cloud-computing/the-open-cloud-getting-awfully-confusing-201364" target="_blank">many competing standards and APIs</a> and it is yet to be determined which one shall become the de-facto standard of the industry and where to &quot;place our bet&quot;.</li>
                <li><strong>Open PaaS Platforms</strong> that abstract the underlying cloud infrastructure and provide transparent support for all major vendors. You build your application on top of the platform, and leave it up to the platform to communicate to the underlying cloud vendors (whether public or private clouds, or even a hybrid). Examples of such platforms, are <a href="http://www.cloudfoundry.com/">CloudFoundry</a> and <a href="http://www.cloudifysource.org/">Cloudify</a>. I dedicated one of my posts for exploring <a href="http://horovits.wordpress.com/2011/05/31/building-cloud-applications-the-easy-way-using-elastic-application-platforms/" title="Building Cloud Applications the Easy Way Using Elastic Application Platforms">how to build your application using such platforms</a>.</li>
</ol>
<h3>Conclusion</h3>
<p>System architects need to face the reality of the Service Level Agreement provided by Amazon and other cloud vendors and their limitations, and start designing for resilience by spreading across isolated environments, deploying <a href="http://horovits.wordpress.com/2012/06/17/aws-outage-thoughts-on-disaster-recovery-policies/">DR sites</a>, and by similar redundancy measures to keep their service up-and-running and their data safe. Only that way can we guarantee that we will not be the next one to fall off the 99.995% SLA. This post was originally posted <a target="_blank" href="http://horovits.wordpress.com/2012/10/24/aws-outage-multi-cloud-disaster-recovery/">here</a>.</p>
<p><img align="left" alt="1311765722_picons03" class="asset  asset-image at-xid-6a00d835457b7453ef017c329cd14f970b" src="http://natishalom.typepad.com/.a/6a00d835457b7453ef017c329cd14f970b-75wi" style="width: 55px; margin: 0px 5px 5px 0px; " title="1311765722_picons03" width="55" /><br />
<a href="https://twitter.com/intent/follow?screen_name=horovits" target="_blank" title="Follow Dotan Horovits on Twitter!">Follow Dotan&nbsp;</a>on Twitter!</p>


